(()=>{"use strict";var t,e={4855:(t,e,n)=>{t.exports=n.p+"b990773c273da73f4014.png"},6013:(t,e,n)=>{t.exports=n.p+"8f44230d3f35bb4fb8ba.png"},7922:(t,e,n)=>{t.exports=n.p+"2e044db88d6fcd9bae96.png"},2798:(t,e,n)=>{t.exports=n.p+"7889a193c4e3735a03ae.png"},2606:(t,e,n)=>{t.exports=n.p+"877d78469b1e3540553d.png"},3049:(t,e,n)=>{t.exports=n.p+"618568549cbb45c76e03.png"},5015:(t,e,n)=>{t.exports=n.p+"8d81a53a49b49ca8af3e.png"},3860:(t,e,n)=>{t.exports=n.p+"1b7c29ce23d0d646f2eb.png"},6627:(t,e,n)=>{t.exports=n.p+"d5bfc5f74b7a1c60f0ba.png"},8163:(t,e,n)=>{t.exports=n.p+"150748ca479ac03a530e.png"},595:(t,e,n)=>{t.exports=n.p+"93c47e74963cd5f1622d.png"},3012:t=>{t.exports="###n###\n#     #\n#     #\n# % m #\n#     #\n#  P  #\n#######"},8945:t=>{t.exports="#######\n### ###\n       \n# # # #\n# #   #\n# # # #\n# # ###\n#     #\n###n###\n#     #\n#     #\n#     #\n#  P  #\n#     #\n#     #\n#######"},6656:(t,e,n)=>{t.exports=n.p+"ec79279b19d6774e308d.wav"},9812:(t,e,n)=>{t.exports=n.p+"8a17c7f531bb669ef5af.wav"},3458:(t,e,n)=>{t.exports=n.p+"6e97d832f72662724b54.wav"},5436:(t,e,n)=>{t.exports=n.p+"d31775442b9d954f5569.wav"},833:(t,e,n)=>{t.exports=n.p+"f16726f62ee2d83fbc92.glb"},34:(t,e,n)=>{t.exports=n.p+"2a7e71e865e3bcb3cd0b.glb"},4316:(t,e,n)=>{t.exports=n.p+"5a338fce7a1f3c514f39.glb"},5965:(t,e,n)=>{t.exports=n.p+"bac1d5bb09ba958de0bd.glb"},111:(t,e,n)=>{t.exports=n.p+"de9941b2e1ad4b58053c.glb"},4770:(t,e,n)=>{t.exports=n.p+"44b259da6c726aed0514.glb"},8244:(t,e,n)=>{t.exports=n.p+"10af00bfb21df68f26c7.glb"},9216:(t,e,n)=>{t.exports=n.p+"4f1e141de41afb7af73a.glb"},7446:(t,e,n)=>{t.exports=n.p+"7576b2b9465999787b3f.glb"},5140:(t,e,n)=>{t.exports=n.p+"7a438c705b6280c743db.glb"},2475:(t,e,n)=>{t.exports=n.p+"488f6b1976fde6272404.glb"},2409:(t,e,n)=>{t.exports=n.p+"3a87d2b6d3515edde78b.glb"},4505:(t,e,n)=>{t.exports=n.p+"8acdf5702fcb35acd623.glb"},7928:(t,e,n)=>{t.exports=n.p+"bf2bcb05f89d9c777a9b.glb"},1177:(t,e,n)=>{t.exports=n.p+"92b770847f0c904691fa.jpg"},7131:(t,e,n)=>{t.exports=n.p+"e743fcc626badb9d4975.jpg"},1645:(t,e,n)=>{t.exports=n.p+"623a98a1f51ab36cd7a1.jpg"},5497:(t,e,n)=>{t.exports=n.p+"1014bf6e239b98dbf9e8.jpg"},3345:(t,e,n)=>{t.exports=n.p+"19ac2d232039c1dca3e2.jpg"},301:(t,e,n)=>{t.exports=n.p+"2852df1d8a81a4f04f55.jpg"},3575:(t,e,n)=>{t.exports=n.p+"f27b2925d3ad018051b2.wav"},5874:(t,e,n)=>{t.exports=n.p+"2542ae01024b300ac6b6.wav"},4416:(t,e,n)=>{t.exports=n.p+"f8359f147782f6227a80.wav"},9660:(t,e,n)=>{t.exports=n.p+"c7c448a45df60a70e395.wav"},2553:(t,e,n)=>{t.exports=n.p+"e6189838f50c83158d1f.wav"},5467:(t,e,n)=>{t.exports=n.p+"29dc1b85b5736a0e41a1.wav"},5499:(t,e,n)=>{t.exports=n.p+"281a0364b94c6c04eb39.wav"},8754:(t,e,n)=>{t.exports=n.p+"970974eef614d6596be3.wav"},4517:(t,e,n)=>{t.exports=n.p+"ce917a9d45860969fe6a.wav"},8652:(t,e,n)=>{t.exports=n.p+"dd6c44d077c37a911be3.wav"},8983:(t,e,n)=>{t.exports=n.p+"83096fecd44b5b000aa6.wav"},9545:(t,e,n)=>{t.exports=n.p+"cfc2ee70b2ae26911a5e.wav"},1304:(t,e,n)=>{t.exports=n.p+"612a2b1d88aa92153d6d.jpg"},9165:(t,e,n)=>{t.exports=n.p+"c04beafb9f3a9bd689bc.jpg"},8863:(t,e,n)=>{t.exports=n.p+"d66f714181e2bac9610e.jpg"},2374:(t,e,n)=>{t.exports=n.p+"a738c8143e3961740b6f.png"},1960:(t,e,n)=>{t.exports=n.p+"546f52320481d9beaa01.png"},7319:(t,e,n)=>{t.exports=n.p+"cc0d7f28e126866fd971.png"},5396:(t,e,n)=>{var i,r,o,a=n(6329),s=n(107),l=n.n(s),u=n(7531),h=n(7802),c=n(685),f=n(1019),y=n(3210),d=n(2070),v=n(8708),p=n(5943);function m(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return g(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?g(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function g(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}!function(t){t[t.Empty=0]="Empty",t[t.Wall=1]="Wall",t[t.Rock=2]="Rock",t[t.Energy=3]="Energy",t[t.RedDoor=4]="RedDoor",t[t.YellowDoor=5]="YellowDoor",t[t.GreenDoor=6]="GreenDoor",t[t.BlueDoor=7]="BlueDoor",t[t.RedKey=8]="RedKey",t[t.YellowKey=9]="YellowKey",t[t.GreenKey=10]="GreenKey",t[t.BlueKey=11]="BlueKey",t[t.Battery=12]="Battery",t[t.Lever=13]="Lever",t[t.ToggleDoor=14]="ToggleDoor",t[t.InverseToggleDoor=15]="InverseToggleDoor",t[t.ADoor=16]="ADoor",t[t.BDoor=17]="BDoor",t[t.CDoor=18]="CDoor",t[t.ABox=19]="ABox",t[t.BBox=20]="BBox",t[t.CBox=21]="CBox",t[t.Drone=22]="Drone",t[t.BigDoor=23]="BigDoor",t[t.Portal=24]="Portal",t[t.Map=25]="Map",t[t.Gun=26]="Gun"}(o||(o={}));var k=[o.RedDoor,o.YellowDoor,o.GreenDoor,o.BlueDoor,o.ToggleDoor,o.ADoor,o.BDoor,o.CDoor],Z=(i={},(0,p.Z)(i,o.RedDoor,{oneTimeItem:o.RedKey}),(0,p.Z)(i,o.YellowDoor,{oneTimeItem:o.YellowKey}),(0,p.Z)(i,o.GreenDoor,{oneTimeItem:o.GreenKey}),(0,p.Z)(i,o.BlueDoor,{oneTimeItem:o.BlueKey}),(0,p.Z)(i,o.ToggleDoor,{reuseItem:o.Lever}),(0,p.Z)(i,o.ADoor,{oneTimeItem:o.Battery,reuseItem:o.ABox}),(0,p.Z)(i,o.BDoor,{oneTimeItem:o.Battery,reuseItem:o.BBox}),(0,p.Z)(i,o.CDoor,{oneTimeItem:o.Battery,reuseItem:o.CBox}),i),b=(r={},(0,p.Z)(r," ",o.Empty),(0,p.Z)(r,"#",o.Wall),(0,p.Z)(r,"@",o.Rock),(0,p.Z)(r,"*",o.Energy),(0,p.Z)(r,"R",o.RedDoor),(0,p.Z)(r,"Y",o.YellowDoor),(0,p.Z)(r,"G",o.GreenDoor),(0,p.Z)(r,"L",o.BlueDoor),(0,p.Z)(r,"r",o.RedKey),(0,p.Z)(r,"y",o.YellowKey),(0,p.Z)(r,"g",o.GreenKey),(0,p.Z)(r,"l",o.BlueKey),(0,p.Z)(r,":",o.Battery),(0,p.Z)(r,"/",o.Lever),(0,p.Z)(r,"t",o.ToggleDoor),(0,p.Z)(r,"T",o.InverseToggleDoor),(0,p.Z)(r,"A",o.ADoor),(0,p.Z)(r,"B",o.BDoor),(0,p.Z)(r,"C",o.CDoor),(0,p.Z)(r,"a",o.ABox),(0,p.Z)(r,"b",o.BBox),(0,p.Z)(r,"c",o.CBox),(0,p.Z)(r,"d",o.Drone),(0,p.Z)(r,"n",o.BigDoor),(0,p.Z)(r,"P",o.Portal),(0,p.Z)(r,"m",o.Map),(0,p.Z)(r,"%",o.Gun),r);function w(t){var e,n=t.split(/\r?\n/),i=0,r=m(n);try{for(r.s();!(e=r.n()).done;){var a=e.value;i=Math.max(i,a.length)}}catch(t){r.e(t)}finally{r.f()}var s,l=[],u=m(n);try{for(u.s();!(s=u.n()).done;){var h,c=s.value,f=[],y=m(c);try{for(y.s();!(h=y.n()).done;){var d=h.value,v=b[d];void 0===v?f.push(o.Empty):f.push(v)}}catch(t){y.e(t)}finally{y.f()}for(;f.length<i;)f.push(o.Empty);l.push(f)}}catch(t){u.e(t)}finally{u.f()}return l}var A=n(6709),S=function(){function t(e){(0,h.Z)(this,t),(0,p.Z)(this,"maze",void 0),this.maze=e}return(0,c.Z)(t,[{key:"mazeWidth",get:function(){return this.maze[0].length}},{key:"mazeHeight",get:function(){return this.maze.length}},{key:"tileLocationToPosition",value:function(t,e){var n=5*t-5*Math.floor(this.mazeHeight/2),i=5*Math.floor(this.mazeWidth/2)-5*e;return new A.Pa4(n,0,i)}},{key:"positionToTileLocation",value:function(t){return[Math.round(t.x/5)+Math.floor(this.mazeHeight/2),Math.floor(this.mazeWidth/2)-Math.round(t.z/5)]}}]),t}(),D=n(5567);function x(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return T(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?T(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function T(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var M=new A.nls({color:16777215}),C=new A.Uk6(new A.cJO(1,2)),B=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),R=new A.a$l([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3),E=(new A.u9r).setIndex(new A.TlE(B,1)).setAttribute("position",R),j=function(){function t(e){(0,h.Z)(this,t),(0,p.Z)(this,"box",void 0),(0,p.Z)(this,"_showMask",!1),(0,p.Z)(this,"helper",null),this.box=new A.ZzF,e instanceof A.ZzF?this.box.copy(e):e instanceof A.Tme&&this.update(e)}return(0,c.Z)(t,[{key:"showMask",get:function(){return this._showMask},set:function(t){this._showMask=t,!1===t&&null!==this.helper&&(this.helper.parent.remove(this.helper),this.helper=null)}},{key:"isCollidingWith",value:function(t){return t.intersectsBox(this.box)}},{key:"intersectsBox",value:function(t){return this.box.intersectsBox(t)}},{key:"intersectsSphere",value:function(t){return this.box.intersectsSphere(t)}},{key:"intersectRay",value:function(t){return t.intersectBox(this.box,new A.Pa4)}},{key:"containsPoint",value:function(t){return this.box.containsPoint(t)}},{key:"update",value:function(t){this.box.setFromObject(t)}},{key:"_drawMask",value:function(t){this.showMask?(null===this.helper&&(this.helper=new A.ejS(E,M),t.add(this.helper)),this.box.getCenter(this.helper.position),this.box.getSize(this.helper.scale),this.helper.scale.multiplyScalar(.5)):null!==this.helper&&(t.remove(this.helper),this.helper=null)}}]),t}(),P=function(){function t(e){(0,h.Z)(this,t),(0,p.Z)(this,"sphere",void 0),(0,p.Z)(this,"_showMask",!1),(0,p.Z)(this,"helper",null),this.sphere=new A.aLr,e instanceof A.aLr?this.sphere.copy(e):e instanceof A.Tme&&this.update(e)}return(0,c.Z)(t,[{key:"showMask",get:function(){return this._showMask},set:function(t){this._showMask=t,!1===t&&null!==this.helper&&(this.helper.parent.remove(this.helper),this.helper=null)}},{key:"isCollidingWith",value:function(t){return t.intersectsSphere(this.sphere)}},{key:"intersectsBox",value:function(t){return this.sphere.intersectsBox(t)}},{key:"intersectsSphere",value:function(t){return this.sphere.intersectsSphere(t)}},{key:"intersectRay",value:function(t){return t.intersectSphere(this.sphere,new A.Pa4)}},{key:"containsPoint",value:function(t){return this.sphere.containsPoint(t)}},{key:"update",value:function(t){var e=(new A.ZzF).setFromObject(t).getBoundingSphere(new A.aLr);this.sphere.set(e.center,e.radius)}},{key:"expandByObject",value:function(t){t.updateWorldMatrix(!1,!1);var e=t.geometry;if(void 0!==e){null===e.boundingSphere&&e.computeBoundingSphere();var n=e.boundingSphere.clone();n.applyMatrix4(t.matrixWorld),this.sphere.union(n)}var i,r=x(t.children);try{for(r.s();!(i=r.n()).done;){var o=i.value;this.expandByObject(o)}}catch(t){r.e(t)}finally{r.f()}}},{key:"_drawMask",value:function(t){this.showMask?(null===this.helper&&(this.helper=new A.ejS(C,M),t.add(this.helper)),this.helper.position.copy(this.sphere.center),this.helper.scale.set(this.sphere.radius,this.sphere.radius,this.sphere.radius)):null!==this.helper&&(t.remove(this.helper),this.helper=null)}}]),t}(),I=function(){function t(){(0,h.Z)(this,t),(0,p.Z)(this,"masks",void 0),(0,p.Z)(this,"_showMask",!1);for(var e=arguments.length,n=new Array(e),i=0;i<e;i++)n[i]=arguments[i];this.masks=(0,D.Z)(n.flat(1))}return(0,c.Z)(t,[{key:"showMask",get:function(){return this._showMask},set:function(t){this._showMask=t;var e,n=x(this.masks);try{for(n.s();!(e=n.n()).done;)e.value.showMask=t}catch(t){n.e(t)}finally{n.f()}}},{key:"addMask",value:function(){for(var t,e=arguments.length,n=new Array(e),i=0;i<e;i++)n[i]=arguments[i];(t=this.masks).push.apply(t,(0,D.Z)(n.flat(1)))}},{key:"isCollidingWith",value:function(t){return this.masks.some((function(e){return e.isCollidingWith(t)}))}},{key:"intersectsBox",value:function(t){return this.masks.some((function(e){return e.intersectsBox(t)}))}},{key:"intersectsSphere",value:function(t){return this.masks.some((function(e){return e.intersectsSphere(t)}))}},{key:"intersectRay",value:function(t){var e,n=null,i=x(this.masks);try{for(i.s();!(e=i.n()).done;){var r=e.value.intersectRay(t);null!==r&&(null===n||r.distanceTo(t.origin)<n.distanceTo(t.origin))&&(n=r)}}catch(t){i.e(t)}finally{i.f()}return n}},{key:"containsPoint",value:function(t){return this.masks.some((function(e){return e.containsPoint(t)}))}},{key:"update",value:function(t){var e,n=x(this.masks);try{for(n.s();!(e=n.n()).done;)e.value.update(t)}catch(t){n.e(t)}finally{n.f()}}},{key:"_drawMask",value:function(t){if(this.showMask){var e,n=x(this.masks);try{for(n.s();!(e=n.n()).done;)e.value._drawMask(t)}catch(t){n.e(t)}finally{n.f()}}}}]),t}(),L=function(){function t(){(0,h.Z)(this,t),(0,p.Z)(this,"showMask",void 0)}return(0,c.Z)(t,[{key:"isCollidingWith",value:function(t){return!1}},{key:"intersectsBox",value:function(t){return!1}},{key:"intersectsSphere",value:function(t){return!1}},{key:"intersectRay",value:function(t){return null}},{key:"containsPoint",value:function(t){return!1}},{key:"update",value:function(t){}},{key:"_drawMask",value:function(t){}}]),t}(),F=new A.DvJ(1,1,1),O=new A.Wid,W=new A.ZzF(new A.Pa4(-.5,-.5,-.5),new A.Pa4(.5,.5,.5)),G=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["wall"]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"walls",void 0),(0,p.Z)(this,"mask",void 0),(0,p.Z)(this,"currentWall",0),this.mask=new I,O.map=t.buildWallTexture("BrickColor",n),O.normalMap=t.buildWallTexture("BrickNormal",n),O.aoMap=t.buildWallTexture("BrickOcclusion",n),O.side=A.Wl3,this.walls=new A.SPe(F,O,e),this.walls.castShadow=!0,this.walls.receiveShadow=!1}return(0,c.Z)(t,[{key:"addWall",value:function(t,e,n){if(!(this.currentWall>=this.walls.count)){var i=n.tileLocationToPosition(t,e),r=new A.yGw;r.makeTranslation(i.x,9,i.z),r.scale(new A.Pa4(5,20,5)),this.walls.setMatrixAt(this.currentWall,r);var o=W.clone();o.applyMatrix4(r),this.mask.addMask(new j(o)),this.currentWall+=1}}},{key:"onCreate",value:function(t){this.entity=t,this.walls.instanceMatrix.needsUpdate=!0,this.entity.object=this.walls,this.entity.mask=this.mask}},{key:"onDestroy",value:function(){}},{key:"onStep",value:function(){}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}],[{key:"buildWallTexture",value:function(t,e){var n=e.game.assets.getTexture(t);return n.wrapS=A.rpg,n.wrapT=A.rpg,n.repeat.set(1,4),n}}]),t}(),N=Math.PI/4,H=Math.PI/64,z=function(){function t(){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["light"]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"light",void 0),(0,p.Z)(this,"lightAngle",5*Math.PI/12),(0,p.Z)(this,"reverse",!1),(0,p.Z)(this,"lightDistance",void 0)}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t,this.light=new A.Ox3(16777215,1),this.calculateLight(),this.entity.object=this.light}},{key:"onDestroy",value:function(){}},{key:"calculateLight",value:function(){var t=this.entity.area.state,e=5*t.mazeWidth,n=5*t.mazeHeight;this.light.castShadow=!0,this.light.shadow.camera.top=n/2,this.light.shadow.camera.bottom=-n/2,this.light.shadow.camera.left=-e/2,this.light.shadow.camera.right=e/2,this.lightDistance=e/Math.cos(Math.PI/4),this.updateLightAngle(),this.entity.setTimer(0,1e3,!0)}},{key:"onTimer",value:function(t){0===t&&(this.lightAngle+=this.reverse?-H:H,this.updateLightAngle(),this.lightAngle<N?this.reverse=!1:this.lightAngle>Math.PI-N&&(this.reverse=!0))}},{key:"updateLightAngle",value:function(){this.light.position.x=0,this.light.position.y=this.lightDistance*Math.sin(this.lightAngle),this.light.position.z=-this.lightDistance*Math.cos(this.lightAngle)}},{key:"onStep",value:function(){}},{key:"onDraw",value:function(t){}}]),t}(),K=new A._12,_=new A.Wid,Y=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["wall"]),(0,p.Z)(this,"width",void 0),(0,p.Z)(this,"height",void 0),(0,p.Z)(this,"entity",void 0),this.width=e,this.height=n}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t,_.map=this.buildTexture("GrassColor"),_.normalMap=this.buildTexture("GrassNormal"),_.aoMap=this.buildTexture("GrassOcclusion"),this.entity.object=new A.Kj0(K,_),this.entity.object.rotation.x=3*Math.PI/2,this.entity.object.scale.set(5*this.height+2,5*this.width+2,1),this.entity.object.castShadow=!0,this.entity.object.receiveShadow=!0}},{key:"buildTexture",value:function(t){var e=this.entity.area.game.assets.getTexture(t);return e.wrapS=A.rpg,e.wrapT=A.rpg,e.repeat.set(5*this.width/2,5*this.height/2),e.offset.set(.5,.5),e.rotation=Math.PI/6,e}},{key:"onDestroy",value:function(){}},{key:"onStep",value:function(){}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}]),t}();function U(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return X(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?X(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function X(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var V=function(){function t(e,n,i){(0,h.Z)(this,t),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"row",void 0),(0,p.Z)(this,"column",void 0),(0,p.Z)(this,"_open",!1),(0,p.Z)(this,"doorObject",void 0),(0,p.Z)(this,"leftDoor",void 0),(0,p.Z)(this,"leftDoorMask",void 0),(0,p.Z)(this,"rightDoor",void 0),(0,p.Z)(this,"rightDoorMask",void 0),(0,p.Z)(this,"mixer",void 0),(0,p.Z)(this,"leftDoorAction",void 0),(0,p.Z)(this,"rightDoorAction",void 0),(0,p.Z)(this,"keyHoleAction",void 0),this.row=e,this.column=n,this.doorObject=i}return(0,c.Z)(t,[{key:"open",get:function(){return this._open}},{key:"onCreate",value:function(e){this.entity=e;var n=e.area.game.assets.getObject(this.doorObject).clone();n.scale.y=2.5,n.scale.z=2.5,n.position.copy(e.area.state.tileLocationToPosition(this.row,this.column)),this.row%2!=0&&(n.rotation.y=Math.PI/2);var i,r=U(n.children);try{for(r.s();!(i=r.n()).done;)i.value.castShadow=!0}catch(t){r.e(t)}finally{r.f()}var o,a=U(n.children[0].children);try{for(a.s();!(o=a.n()).done;)o.value.castShadow=!0}catch(t){a.e(t)}finally{a.f()}this.entity.object=n,this.leftDoor=this.entity.object.children[2],this.leftDoorMask=new j(this.leftDoor),this.rightDoor=this.entity.object.children[1],this.rightDoorMask=new j(this.rightDoor),this.entity.mask=new I(this.leftDoorMask,this.rightDoorMask),this.mixer=new A.Xcj(n),this.leftDoorAction=this.mixer.clipAction(e.area.game.assets.getAnimation("LeftDoorAction")),this.rightDoorAction=this.mixer.clipAction(e.area.game.assets.getAnimation("RightDoorAction")),this.keyHoleAction=this.mixer.clipAction(e.area.game.assets.getAnimation("KeyHoleAction")),t.configureAnimation(this.leftDoorAction),t.configureAnimation(this.rightDoorAction),t.configureAnimation(this.keyHoleAction),this.onCreateDoor()}},{key:"onStep",value:function(){this.mixer.update(.01),!this._open&&this.isAnimationPlaying()?(this.leftDoorMask.update(this.entity.object),this.rightDoorMask.update(this.entity.object)):(this.leftDoorMask.update(this.leftDoor),this.rightDoorMask.update(this.rightDoor)),this.onStepDoor()}},{key:"openDoor",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;this._open=!0,t.playAction(this.leftDoorAction,e),t.playAction(this.rightDoorAction,e),t.playAction(this.keyHoleAction,e)}},{key:"closeDoor",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;this._open=!1,t.playActionInverse(this.leftDoorAction,e),t.playActionInverse(this.rightDoorAction,e),t.playActionInverse(this.keyHoleAction,e)}},{key:"isAnimationPlaying",value:function(){return this.leftDoorAction.isRunning()||this.rightDoorAction.isRunning()||this.keyHoleAction.isRunning()}}],[{key:"configureAnimation",value:function(t){t.loop=A.jAl,t.clampWhenFinished=!0}},{key:"playAction",value:function(t,e){t.timeScale=Math.abs(e),t.paused=!1,t.play()}},{key:"playActionInverse",value:function(t,e){t.timeScale=-Math.abs(e),t.paused=!1,t.play()}}]),t}();var $,q,Q,J,tt,et,nt=function(t){(0,y.Z)(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=(0,v.Z)(e);if(n){var r=(0,v.Z)(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return(0,d.Z)(this,t)});function r(t,e){var n;return(0,h.Z)(this,r),n=i.call(this,t,e,"Door"),(0,p.Z)((0,f.Z)(n),"tags",["wall"]),(0,p.Z)((0,f.Z)(n),"showMessage",!1),n}return(0,c.Z)(r,[{key:"onCreateDoor",value:function(){this.entity.object.scale.y=20/3,this.entity.object.scale.x=10,this.entity.object.children[0].visible=!1,this.openDoor(1/6)}},{key:"onDestroy",value:function(){}},{key:"onStepDoor",value:function(){}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}]),r}(V);function it(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}!function(t){t[t.Up=0]="Up",t[t.Down=1]="Down",t[t.Left=2]="Left",t[t.Right=3]="Right",t[t.Control=4]="Control",t[t.Alt=5]="Alt",t[t.Delete=6]="Delete",t[t.Backspace=7]="Backspace",t[t.CapsLock=8]="CapsLock",t[t.Enter=9]="Enter",t[t.Escape=10]="Escape",t[t.End=11]="End",t[t.Shift=12]="Shift",t[t.PageUp=13]="PageUp",t[t.PageDown=14]="PageDown",t[t.Pause=15]="Pause",t[t.Cancel=16]="Cancel",t[t.ScrollLock=17]="ScrollLock",t[t.A=18]="A",t[t.B=19]="B",t[t.C=20]="C",t[t.D=21]="D",t[t.E=22]="E",t[t.F=23]="F",t[t.G=24]="G",t[t.H=25]="H",t[t.I=26]="I",t[t.J=27]="J",t[t.K=28]="K",t[t.L=29]="L",t[t.M=30]="M",t[t.N=31]="N",t[t.O=32]="O",t[t.P=33]="P",t[t.Q=34]="Q",t[t.R=35]="R",t[t.S=36]="S",t[t.T=37]="T",t[t.U=38]="U",t[t.V=39]="V",t[t.W=40]="W",t[t.X=41]="X",t[t.Y=42]="Y",t[t.Z=43]="Z",t[t.F1=44]="F1",t[t.F2=45]="F2",t[t.F3=46]="F3",t[t.F4=47]="F4",t[t.F5=48]="F5",t[t.F6=49]="F6",t[t.F7=50]="F7",t[t.F8=51]="F8",t[t.F9=52]="F9",t[t.F10=53]="F10",t[t.F11=54]="F11",t[t.F12=55]="F12",t[t.Num1=56]="Num1",t[t.Num2=57]="Num2",t[t.Num3=58]="Num3",t[t.Num4=59]="Num4",t[t.Num5=60]="Num5",t[t.Num6=61]="Num6",t[t.Num7=62]="Num7",t[t.Num8=63]="Num8",t[t.Num9=64]="Num9",t[t.Num0=65]="Num0",t[t.Amperstand=66]="Amperstand",t[t.Asterisk=67]="Asterisk",t[t.At=68]="At",t[t.BackSlash=69]="BackSlash",t[t.BraceLeft=70]="BraceLeft",t[t.BraceRight=71]="BraceRight",t[t.Caret=72]="Caret",t[t.CloseBracket=73]="CloseBracket",t[t.Colon=74]="Colon",t[t.Comma=75]="Comma",t[t.Dollar=76]="Dollar",t[t.EqualSign=77]="EqualSign",t[t.ExclamationPoint=78]="ExclamationPoint",t[t.GreaterThan=79]="GreaterThan",t[t.LeftParen=80]="LeftParen",t[t.LessThan=81]="LessThan",t[t.Minus=82]="Minus",t[t.Hashtag=83]="Hashtag",t[t.OpenBracket=84]="OpenBracket",t[t.Period=85]="Period",t[t.QuestionMark=86]="QuestionMark",t[t.SingleQuote=87]="SingleQuote",t[t.DoubleQuote=88]="DoubleQuote",t[t.RightParen=89]="RightParen",t[t.Semicolon=90]="Semicolon",t[t.ForwardSlash=91]="ForwardSlash",t[t.Underscore=92]="Underscore",t[t.Space=93]="Space",t[t.Tick=94]="Tick",t[t.Tilda=95]="Tilda"}(Q||(Q={})),function(t){t[t.Up=12]="Up",t[t.Down=13]="Down",t[t.Left=14]="Left",t[t.Right=15]="Right",t[t.ACross=0]="ACross",t[t.BCircle=1]="BCircle",t[t.XSquare=2]="XSquare",t[t.YTriangle=3]="YTriangle",t[t.Select=8]="Select",t[t.Start=9]="Start",t[t.Center=16]="Center",t[t.LeftBumper=4]="LeftBumper",t[t.RightBumper=5]="RightBumper",t[t.LeftStickCenter=10]="LeftStickCenter",t[t.RightStickCenter=11]="RightStickCenter"}(J||(J={})),function(t){t[t.LeftStickX=0]="LeftStickX",t[t.LeftStickY=1]="LeftStickY",t[t.RightStickX=2]="RightStickX",t[t.RightStickY=3]="RightStickY",t[t.LeftTrigger=4]="LeftTrigger",t[t.RightTrigger=5]="RightTrigger"}(tt||(tt={})),function(t){t[t.Left=0]="Left",t[t.Middle=1]="Middle",t[t.Right=2]="Right"}(et||(et={}));var rt=($={},(0,p.Z)($,"ArrowUp",Q.Up),(0,p.Z)($,"ArrowDown",Q.Down),(0,p.Z)($,"ArrowLeft",Q.Left),(0,p.Z)($,"ArrowRight",Q.Right),(0,p.Z)($,"Control",Q.Control),(0,p.Z)($,"Alt",Q.Alt),(0,p.Z)($,"Delete",Q.Delete),(0,p.Z)($,"Backspace",Q.Backspace),(0,p.Z)($,"CapsLock",Q.CapsLock),(0,p.Z)($,"Enter",Q.Enter),(0,p.Z)($,"Escape",Q.Escape),(0,p.Z)($,"End",Q.End),(0,p.Z)($,"Shift",Q.Shift),(0,p.Z)($,"PageUp",Q.PageUp),(0,p.Z)($,"PageDown",Q.PageDown),(0,p.Z)($,"Pause",Q.Pause),(0,p.Z)($,"Cancel",Q.Cancel),(0,p.Z)($,"ScrollLock",Q.ScrollLock),(0,p.Z)($,"a",Q.A),(0,p.Z)($,"b",Q.B),(0,p.Z)($,"c",Q.C),(0,p.Z)($,"d",Q.D),(0,p.Z)($,"e",Q.E),(0,p.Z)($,"f",Q.F),(0,p.Z)($,"g",Q.G),(0,p.Z)($,"h",Q.H),(0,p.Z)($,"i",Q.I),(0,p.Z)($,"j",Q.J),(0,p.Z)($,"k",Q.K),(0,p.Z)($,"l",Q.L),(0,p.Z)($,"m",Q.M),(0,p.Z)($,"n",Q.N),(0,p.Z)($,"o",Q.O),(0,p.Z)($,"p",Q.P),(0,p.Z)($,"q",Q.Q),(0,p.Z)($,"r",Q.R),(0,p.Z)($,"s",Q.S),(0,p.Z)($,"t",Q.T),(0,p.Z)($,"u",Q.U),(0,p.Z)($,"v",Q.V),(0,p.Z)($,"w",Q.W),(0,p.Z)($,"x",Q.X),(0,p.Z)($,"y",Q.Y),(0,p.Z)($,"z",Q.Z),(0,p.Z)($,"A",Q.A),(0,p.Z)($,"B",Q.B),(0,p.Z)($,"C",Q.C),(0,p.Z)($,"D",Q.D),(0,p.Z)($,"E",Q.E),(0,p.Z)($,"F",Q.F),(0,p.Z)($,"G",Q.G),(0,p.Z)($,"H",Q.H),(0,p.Z)($,"I",Q.I),(0,p.Z)($,"J",Q.J),(0,p.Z)($,"K",Q.K),(0,p.Z)($,"L",Q.L),(0,p.Z)($,"M",Q.M),(0,p.Z)($,"N",Q.N),(0,p.Z)($,"O",Q.O),(0,p.Z)($,"P",Q.P),(0,p.Z)($,"Q",Q.Q),(0,p.Z)($,"R",Q.R),(0,p.Z)($,"S",Q.S),(0,p.Z)($,"T",Q.T),(0,p.Z)($,"U",Q.U),(0,p.Z)($,"V",Q.V),(0,p.Z)($,"W",Q.W),(0,p.Z)($,"X",Q.X),(0,p.Z)($,"Y",Q.Y),(0,p.Z)($,"Z",Q.Z),(0,p.Z)($,"F1",Q.F1),(0,p.Z)($,"F2",Q.F2),(0,p.Z)($,"F3",Q.F3),(0,p.Z)($,"F4",Q.F4),(0,p.Z)($,"F5",Q.F5),(0,p.Z)($,"F6",Q.F6),(0,p.Z)($,"F7",Q.F7),(0,p.Z)($,"F8",Q.F8),(0,p.Z)($,"F9",Q.F9),(0,p.Z)($,"F10",Q.F10),(0,p.Z)($,"F11",Q.F11),(0,p.Z)($,"F12",Q.F12),(0,p.Z)($,"1",Q.Num1),(0,p.Z)($,"2",Q.Num2),(0,p.Z)($,"3",Q.Num3),(0,p.Z)($,"4",Q.Num4),(0,p.Z)($,"5",Q.Num5),(0,p.Z)($,"6",Q.Num6),(0,p.Z)($,"7",Q.Num7),(0,p.Z)($,"8",Q.Num8),(0,p.Z)($,"9",Q.Num9),(0,p.Z)($,"0",Q.Num0),(0,p.Z)($,"&",Q.Amperstand),(0,p.Z)($,"*",Q.Asterisk),(0,p.Z)($,"@",Q.At),(0,p.Z)($,"\\",Q.BackSlash),(0,p.Z)($,"{",Q.BraceLeft),(0,p.Z)($,"}",Q.BraceRight),(0,p.Z)($,"^",Q.Caret),(0,p.Z)($,"]",Q.CloseBracket),(0,p.Z)($,":",Q.Colon),(0,p.Z)($,",",Q.Comma),(0,p.Z)($,"$",Q.Dollar),(0,p.Z)($,"=",Q.EqualSign),(0,p.Z)($,"!",Q.ExclamationPoint),(0,p.Z)($,">",Q.GreaterThan),(0,p.Z)($,"(",Q.LeftParen),(0,p.Z)($,"<",Q.LessThan),(0,p.Z)($,"-",Q.Minus),(0,p.Z)($,"#",Q.Hashtag),(0,p.Z)($,"[",Q.OpenBracket),(0,p.Z)($,".",Q.Period),(0,p.Z)($,"?",Q.QuestionMark),(0,p.Z)($,"'",Q.SingleQuote),(0,p.Z)($,'"',Q.DoubleQuote),(0,p.Z)($,")",Q.RightParen),(0,p.Z)($,";",Q.Semicolon),(0,p.Z)($,"/",Q.ForwardSlash),(0,p.Z)($,"_",Q.Underscore),(0,p.Z)($," ",Q.Space),(0,p.Z)($,"`",Q.Tick),(0,p.Z)($,"~",Q.Tilda),$),ot=(q={},(0,p.Z)(q,0,et.Left),(0,p.Z)(q,1,et.Middle),(0,p.Z)(q,2,et.Right),q),at=function(){function t(){(0,h.Z)(this,t),(0,p.Z)(this,"buttonsStart",void 0),(0,p.Z)(this,"buttonsDown",void 0),(0,p.Z)(this,"buttonsReleased",void 0),(0,p.Z)(this,"axes",void 0)}return(0,c.Z)(t,null,[{key:"fromGamepad",value:function(t){return{buttonsStart:new Set,buttonsDown:new Set,buttonsReleased:new Set,axes:[].concat((0,D.Z)(t.axes),[t.buttons[6].value,t.buttons[7].value])}}}]),t}(),st=function(){function t(e){(0,h.Z)(this,t),(0,p.Z)(this,"canvas",void 0),(0,p.Z)(this,"keysStart",new Set),(0,p.Z)(this,"keysDown",new Set),(0,p.Z)(this,"keysReleased",new Set),(0,p.Z)(this,"gamepadState",{}),(0,p.Z)(this,"mouseCoords",[0,0]),(0,p.Z)(this,"mouseMovement",[0,0]),(0,p.Z)(this,"mouseStart",new Set),(0,p.Z)(this,"mouseDown",new Set),(0,p.Z)(this,"mouseReleased",new Set),(0,p.Z)(this,"_pointerLockEnabled",!1),this.canvas=e,e.addEventListener("keydown",this.onKeyDown.bind(this)),e.addEventListener("keyup",this.onKeyRelease.bind(this)),window.addEventListener("gamepadconnected",this.onGamepadConnected.bind(this)),window.addEventListener("gamepaddisconnected",this.onGamepadDisconnected.bind(this)),e.addEventListener("mousemove",this.onMouseMove.bind(this)),e.addEventListener("mousedown",this.onMouseDown.bind(this)),e.addEventListener("mouseup",this.onMouseUp.bind(this)),e.addEventListener("click",this.onPointerLockClick.bind(this)),document.addEventListener("pointerlockchange",this.onPointerLockChange.bind(this)),document.addEventListener("pointerlockerror",this.onPointerLockError.bind(this))}return(0,c.Z)(t,[{key:"onKeyDown",value:function(t){var e=rt[t.key];void 0!==e&&(this.keysDown.add(e),t.repeat||this.keysStart.add(e))}},{key:"onKeyRelease",value:function(t){var e=rt[t.key];void 0!==e&&(this.keysDown.delete(e),this.keysReleased.add(e))}},{key:"_clearKeyTick",value:function(){this.keysStart.clear(),this.keysReleased.clear()}},{key:"isKeyStarted",value:function(t){return this.keysStart.has(t)}},{key:"isKeyDown",value:function(t){return this.keysDown.has(t)}},{key:"isKeyReleased",value:function(t){return this.keysReleased.has(t)}},{key:"onGamepadConnected",value:function(t){var e=t.gamepad;"standard"===e.mapping&&(this.gamepadState[e.index]=at.fromGamepad(e))}},{key:"onGamepadDisconnected",value:function(t){var e=t.gamepad;delete this.gamepadState[e.index]}},{key:"_updateGamepad",value:function(){if(void 0!==navigator.getGamepads){var t,e=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return it(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?it(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}(navigator.getGamepads());try{for(e.s();!(t=e.n()).done;){var n=t.value;if(null!==n){var i=this.gamepadState[n.index]||at.fromGamepad(n),r=new Set,o=new Set,a=new Set;for(var s in J)if(!isNaN(Number(s))){var l=Number(s);n.buttons[l].pressed?(o.add(l),i.buttonsDown.has(l)||r.add(l)):i.buttonsDown.has(l)&&a.add(l)}var u=[].concat((0,D.Z)(n.axes),[n.buttons[6].value,n.buttons[7].value]);Object.assign(this.gamepadState[n.index],{buttonsStart:r,buttonsDown:o,buttonsReleased:a,axes:u})}}}catch(t){e.e(t)}finally{e.f()}}}},{key:"isGamepadButtonStarted",value:function(t,e){var n=this.gamepadState[t];return void 0!==n&&n.buttonsStart.has(e)}},{key:"isGamepadButtonDown",value:function(t,e){var n=this.gamepadState[t];return void 0!==n&&n.buttonsDown.has(e)}},{key:"isGamepadButtonReleased",value:function(t,e){var n=this.gamepadState[t];return void 0!==n&&n.buttonsReleased.has(e)}},{key:"getGamepadAxis",value:function(t,e){var n=this.gamepadState[t];return void 0===n?0:n.axes[e]}},{key:"pointerLockEnabled",get:function(){return this._pointerLockEnabled},set:function(t){this._pointerLockEnabled=t,t||document.exitPointerLock()}},{key:"onMouseMove",value:function(t){this.mouseCoords=[t.clientX*this.canvas.width/this.canvas.clientWidth,t.clientY*this.canvas.height/this.canvas.clientHeight],document.pointerLockElement===this.canvas?this.mouseMovement=[t.movementX,t.movementY]:this.mouseMovement=[0,0]}},{key:"onMouseDown",value:function(t){var e=ot[t.button];void 0!==e&&(this.mouseDown.add(e),this.mouseStart.add(e))}},{key:"onMouseUp",value:function(t){var e=ot[t.button];void 0!==e&&(this.mouseDown.delete(e),this.mouseReleased.delete(e))}},{key:"onPointerLockClick",value:function(){this._pointerLockEnabled&&this.canvas.requestPointerLock()}},{key:"onPointerLockChange",value:function(t){document.pointerLockElement!==this.canvas&&(this.mouseMovement=[0,0])}},{key:"onPointerLockError",value:function(t){}},{key:"_clearMouseTick",value:function(){this.mouseStart.clear(),this.mouseReleased.clear(),this.mouseMovement=[0,0]}},{key:"isMouseButtonStarted",value:function(t){return this.mouseStart.has(t)}},{key:"isMouseButtonDown",value:function(t){return this.mouseDown.has(t)}},{key:"isMouseButtonReleased",value:function(t){return this.mouseReleased.has(t)}},{key:"getMouseX",value:function(){return this.mouseCoords[0]}},{key:"getMouseY",value:function(){return this.mouseCoords[1]}},{key:"getMouseMovementX",value:function(){return this.mouseMovement[0]}},{key:"getMouseMovementY",value:function(){return this.mouseMovement[1]}}]),t}();function lt(t,e){return Math.floor(Math.random()*(e-t+1)+t)}function ut(t,e){return t=Math.ceil(t),e=Math.floor(e),Math.floor(Math.random()*(e-t+1))+t}function ht(t){return t[ut(0,t.length-1)]}function ct(t,e,n){return Math.min(Math.max(t,e),n)}function ft(t,e,n){return t>=e&&t<=n}function yt(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return ft(t,Math.round(t)-e,Math.round(t)+e)}function dt(t){return Math.atan2(Math.sin(t),Math.cos(t))}var vt=function(){function t(e){(0,h.Z)(this,t),(0,p.Z)(this,"x",0),(0,p.Z)(this,"y",0),(0,p.Z)(this,"width",10),(0,p.Z)(this,"height",10),(0,p.Z)(this,"text",void 0),(0,p.Z)(this,"font","12pt sans-serif"),(0,p.Z)(this,"textColor",new A.Ilk("white")),(0,p.Z)(this,"backgroundColor",new A.Ilk("black")),(0,p.Z)(this,"borderColor",new A.Ilk("white")),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"hoveringOver",!1),this.text=e}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t,this.onCreateButton()}},{key:"onStep",value:function(){var t=this.entity.area.game.input;this.hoveringOver=ft(t.getMouseX(),this.x,this.x+this.width)&&ft(t.getMouseY(),this.y,this.y+this.height),this.hoveringOver&&t.isMouseButtonStarted(et.Left)&&this.onClick(),this.onStepButton()}},{key:"onDraw",value:function(t){t.globalAlpha=this.hoveringOver?1:.5,t.fillStyle="#".concat(this.backgroundColor.getHexString()),t.fillRect(this.x,this.y,this.width,this.height),t.font=this.font,t.textAlign="center",t.textBaseline="middle",t.fillStyle="#".concat(this.textColor.getHexString()),t.fillText(this.text,this.x+this.width/2,this.y+this.height/2),t.beginPath(),t.rect(this.x,this.y,this.width,this.height),t.lineWidth=1,t.strokeStyle="#".concat(this.borderColor.getHexString()),t.stroke(),t.globalAlpha=1}}]),t}();var pt=function(t){(0,y.Z)(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=(0,v.Z)(e);if(n){var r=(0,v.Z)(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return(0,d.Z)(this,t)});function r(){var t;return(0,h.Z)(this,r),t=i.call(this,"Start Game"),(0,p.Z)((0,f.Z)(t),"tags",["start-button"]),t}return(0,c.Z)(r,[{key:"onCreateButton",value:function(){this.x=this.entity.area.overlayWidth/2-100,this.y=this.entity.area.overlayHeight-70,this.width=200,this.height=30}},{key:"onDestroy",value:function(){}},{key:"onClick",value:function(){this.entity.area.state.startGame()}},{key:"onStepButton",value:function(){}},{key:"onTimer",value:function(t){}}]),r}(vt),mt=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.1;(0,h.Z)(this,t),(0,p.Z)(this,"tags",[]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"ticks",void 0),(0,p.Z)(this,"fade",void 0),(0,p.Z)(this,"alpha",1),this.ticks=Math.abs(e),this.fade=Math.abs(n)}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t,this.entity.setTimer(1,this.ticks,!0)}},{key:"onDestroy",value:function(){}},{key:"onStep",value:function(){}},{key:"onTimer",value:function(t){1===t&&(this.onTick(this.alpha),this.fadeIn())}},{key:"onTick",value:function(t){}},{key:"fadeIn",value:function(){this.alpha=ct(this.alpha-this.fade,0,1),this.alpha<=0&&(this.entity.clearTimer(1),this.onFinish())}},{key:"onFinish",value:function(){}},{key:"onDraw",value:function(t){t.globalAlpha=this.alpha,t.fillStyle="black",t.fillRect(0,0,this.entity.area.overlayWidth,this.entity.area.overlayHeight),t.globalAlpha=1}}]),t}();var gt=function(t){(0,y.Z)(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=(0,v.Z)(e);if(n){var r=(0,v.Z)(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return(0,d.Z)(this,t)});function r(){var t;return(0,h.Z)(this,r),t=i.call(this,"Restart"),(0,p.Z)((0,f.Z)(t),"tags",["restart-button"]),t}return(0,c.Z)(r,[{key:"onCreateButton",value:function(){this.x=this.entity.area.overlayWidth/2-100,this.y=this.entity.area.overlayHeight-70,this.width=200,this.height=30}},{key:"onDestroy",value:function(){}},{key:"onClick",value:function(){this.entity.area.game.setArea(new gn)}},{key:"onStepButton",value:function(){var t=this.entity.area.game.input;(t.isKeyStarted(Q.Enter)||t.isKeyStarted(Q.Space)||t.isGamepadButtonStarted(0,J.ACross)||t.isGamepadButtonStarted(0,J.XSquare)||t.isGamepadButtonStarted(0,J.YTriangle)||t.isGamepadButtonStarted(0,J.Start)||t.getGamepadAxis(0,tt.RightTrigger)>.5)&&this.onClick()}},{key:"onTimer",value:function(t){}}]),r}(vt),kt=function(){function t(){(0,h.Z)(this,t),(0,p.Z)(this,"area",void 0)}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.area=t,this.area.createEntity(new gt),this.area.game.input.pointerLockEnabled=!1}},{key:"onTimer",value:function(t){}},{key:"onStep",value:function(){}},{key:"onDraw",value:function(t){t.font="48pt sans-serif",t.textAlign="center",t.textBaseline="top",t.fillStyle="red",t.fillText("Game Over",this.area.overlayWidth/2,40)}}]),t}(),Zt=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.1;(0,h.Z)(this,t),(0,p.Z)(this,"tags",[]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"ticks",void 0),(0,p.Z)(this,"fade",void 0),(0,p.Z)(this,"alpha",0),this.ticks=Math.abs(e),this.fade=Math.abs(n)}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t,this.entity.setTimer(1,this.ticks,!0)}},{key:"onDestroy",value:function(){}},{key:"onStep",value:function(){}},{key:"onTimer",value:function(t){1===t&&(this.onTick(this.alpha),this.fadeOut())}},{key:"onTick",value:function(t){}},{key:"fadeOut",value:function(){this.alpha=ct(this.alpha+this.fade,0,1),this.alpha>=1&&(this.entity.clearTimer(1),this.onFinish())}},{key:"onFinish",value:function(){}},{key:"onDraw",value:function(t){t.globalAlpha=this.alpha,t.fillStyle="black",t.fillRect(0,0,this.entity.area.overlayWidth,this.entity.area.overlayHeight),t.globalAlpha=1}}]),t}();var bt=function(t){(0,y.Z)(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=(0,v.Z)(e);if(n){var r=(0,v.Z)(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return(0,d.Z)(this,t)});function r(){return(0,h.Z)(this,r),i.apply(this,arguments)}return(0,c.Z)(r,[{key:"onTick",value:function(t){this.entity.area.state.forestAmbience.volume=1-t}},{key:"onFinish",value:function(){this.entity.area.state.forestAmbience.stop(),this.entity.area.game.setArea(new kt)}}]),r}(Zt),wt=new A.Kj0(new A.fHI,new A.vBJ({color:16776960}));wt.scale.set(.1,2,.1);var At=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["player-bullet"]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"position",void 0),(0,p.Z)(this,"rotation",void 0),this.position=e.getWorldPosition(new A.Pa4),this.rotation=n}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t;var e=wt.clone();e.position.copy(this.position),e.rotation.setFromVector3(this.rotation),e.updateMatrix(),e.rotateZ(Math.PI/2),e.translateY(-.8),this.entity.object=e,this.entity.mask=new P(this.entity.object),this.entity.setTimer(0,250)}},{key:"onDestroy",value:function(){}},{key:"onStep",value:function(){this.entity.object.translateY(-.8),this.entity.mask.update(this.entity.object),this.entity.mask.sphere.radius/=6,this.testForWallCollision()}},{key:"testForWallCollision",value:function(){this.isCollidingWithWalls()&&this.entity.destroy()}},{key:"isCollidingWithWalls",value:function(){var t=this;return this.entity.area.findEntities("wall").some((function(e){return t.entity.isCollidingWith(e)}))}},{key:"onTimer",value:function(t){this.entity.destroy()}},{key:"onDraw",value:function(t){}}]),t}();function St(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var Dt,xt,Tt=.1,Mt=Math.PI/2*.75,Ct=.5,Bt=new A.ZzF(new A.Pa4(-.5,0,-.5),new A.Pa4(.5,3,.5)),Rt=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["player"]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"mask",void 0),(0,p.Z)(this,"camera",void 0),(0,p.Z)(this,"gun",void 0),(0,p.Z)(this,"gunCollected",!1),(0,p.Z)(this,"startRow",void 0),(0,p.Z)(this,"startCol",void 0),(0,p.Z)(this,"horDir",Math.PI/2),(0,p.Z)(this,"vertDir",0),(0,p.Z)(this,"rightTriggerPressed",!1),this.startRow=e,this.startCol=n}return(0,c.Z)(t,[{key:"getFacingAngle",value:function(){return function(t,e,n){var i=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],r=n-e;return t===n&&i?t:((t-e)%r+r)%r+e}(this.horDir,0,2*Math.PI,!1)}},{key:"onCreate",value:function(t){this.entity=t,this.entity.area.game.input.pointerLockEnabled=!0,this.camera=new A.cPb(50,t.area.game.canvasWidth/t.area.game.canvasHeight,.001,1e3),this.entity.area.camera=this.camera,this.entity.object=this.camera;var e=t.area.game.assets.getObject("Gun").clone();e.scale.set(.1,.1,.1),e.position.set(.15,-.04,.05),e.rotation.y=Math.atan2(1/0,1.8),e.visible=!1,this.camera.add(e),this.gun=e;var n=this.entity.area.state.tileLocationToPosition(this.startRow,this.startCol);this.camera.position.copy(n),this.camera.position.y=2,this.mask=new j(Bt),this.entity.mask=this.mask,this.mask.box.translate(n)}},{key:"onDestroy",value:function(){}},{key:"onStep",value:function(){this.camera.aspect=this.entity.area.game.canvasWidth/this.entity.area.game.canvasHeight,this.camera.updateProjectionMatrix(),this.testForGunCollected(),this.handleInput(),this.testForDeath()}},{key:"testForGunCollected",value:function(){this.gunCollected||this.entity.area.game.resources.getResource("inventory").hasCollectedGun()&&(this.gunCollected=!0,this.gun.visible=!0)}},{key:"handleInput",value:function(){var t=this.entity.area.game.input,e=t.getMouseMovementX();Math.abs(e)>2&&(this.horDir+=.002*-e);var n=t.getMouseMovementY();Math.abs(n)>2&&(this.vertDir+=.002*-n,this.vertDir=ct(this.vertDir,-Mt,Mt));var i=t.getGamepadAxis(0,tt.LeftTrigger)>Ct,r=i?.01:.02;this.camera.fov=i?45:50;var o=t.getGamepadAxis(0,tt.RightStickX);Math.abs(o)>Ct&&(this.horDir+=1.5*-o*r);var a=t.getGamepadAxis(0,tt.RightStickY);Math.abs(a)>Ct&&(this.vertDir+=-a*r,this.vertDir=ct(this.vertDir,-Mt,Mt)),this.updateCameraRotation();var s=0,l=0;t.isKeyDown(Q.W)&&(s+=Tt),t.isKeyDown(Q.S)&&(s-=Tt),t.isKeyDown(Q.A)&&(l+=Tt),t.isKeyDown(Q.D)&&(l-=Tt);var u=t.getGamepadAxis(0,tt.LeftStickX),h=-t.getGamepadAxis(0,tt.LeftStickY);if(u<-.5||u>Ct||h<-.5||h>Ct){var c=Math.atan2(h,u);s=Tt*Math.sin(c),l=-.1*Math.cos(c)}this.updatePosition(s,l);var f=t.getGamepadAxis(0,tt.RightTrigger)>Ct,y=!this.rightTriggerPressed&&f;this.rightTriggerPressed=f,(t.isMouseButtonStarted(et.Left)||t.isGamepadButtonStarted(0,J.ACross)||y)&&this.shoot()}},{key:"updateCameraRotation",value:function(){var t=new A.USm(this.vertDir,this.horDir,0,"YXZ");this.camera.quaternion.setFromEuler(t)}},{key:"updatePosition",value:function(t,e){var n=new A.Pa4(-e,0,-t);n.applyAxisAngle(new A.Pa4(0,1,0),this.horDir);var i=new A.Pa4(n.x,0,0),r=new A.Pa4(0,0,n.z);this.mask.box.translate(i),this.isCollidingWithWalls()?this.mask.box.translate(i.negate()):this.camera.position.add(i),this.mask.box.translate(r),this.isCollidingWithWalls()?this.mask.box.translate(r.negate()):this.camera.position.add(r)}},{key:"isCollidingWithWalls",value:function(){var t=this;return this.entity.area.findEntities("wall").some((function(e){return t.entity.isCollidingWith(e)}))||this.entity.area.findEntities("rock").some((function(e){return t.entity.isCollidingWith(e)}))}},{key:"shoot",value:function(){if(this.gunCollected){var t=new A.USm(0,this.horDir+Math.PI/2,this.vertDir,"YXZ");this.entity.area.createEntity(new At(this.gun,t.toVector3()));var e=this.entity.area.state;e.playerShoot.volume=.125,e.playerShoot.play()}}},{key:"testForDeath",value:function(){if(!this.entity.area.game.resources.getResource("health").hasHealthLeft()){this.entity.destroy();var t,e=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return St(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?St(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}(this.entity.area.findEntities("hud"));try{for(e.s();!(t=e.n()).done;)t.value.destroy()}catch(t){e.e(t)}finally{e.f()}this.entity.area.createEntity(new bt)}}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}]),t}();!function(t){t[t.Red=0]="Red",t[t.Yellow=1]="Yellow",t[t.Green=2]="Green",t[t.Blue=3]="Blue"}(Dt||(Dt={}));var Et,jt=(xt={},(0,p.Z)(xt,Dt.Red,new A.Wid({color:16711680,emissive:16711680,emissiveIntensity:1})),(0,p.Z)(xt,Dt.Yellow,new A.Wid({color:16776960,emissive:16776960,emissiveIntensity:1})),(0,p.Z)(xt,Dt.Green,new A.Wid({color:65280,emissive:65280,emissiveIntensity:1})),(0,p.Z)(xt,Dt.Blue,new A.Wid({color:255,emissive:255,emissiveIntensity:1})),xt),Pt=function(t){(0,y.Z)(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=(0,v.Z)(e);if(n){var r=(0,v.Z)(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return(0,d.Z)(this,t)});function r(t,e,n){var o;return(0,h.Z)(this,r),o=i.call(this,t,e,"Door"),(0,p.Z)((0,f.Z)(o),"tags",["wall"]),(0,p.Z)((0,f.Z)(o),"doorColor",void 0),(0,p.Z)((0,f.Z)(o),"interactMask",void 0),o.doorColor=n,o}return(0,c.Z)(r,[{key:"onCreateDoor",value:function(){this.configureMaterialColor(this.entity.object.children[0].children[1]),this.interactMask=new P(this.entity.object)}},{key:"configureMaterialColor",value:function(t){var e=jt[this.doorColor];void 0!==e&&(t.material=e)}},{key:"onDestroy",value:function(){}},{key:"onStepDoor",value:function(){this.testForPlayerInteraction()}},{key:"testForPlayerInteraction",value:function(){if(!this.open){var t=this.entity.area.findFirstEntity("player");if(null!==t&&this.interactMask.isCollidingWith(t.mask)){var e=this.entity.area.findFirstEntity("hud"),n=this.entity.area.game.resources.getResource("inventory"),i=n.hasKeyAvailable(this.doorColor);if(null!==e){if(e.state.message.length>0)return;var r=Dt[this.doorColor].toLowerCase();e.state.message=i?"Action: Use ".concat(r," key"):"Needs a ".concat(r," key")}var o=this.entity.area.game.input;(o.isKeyStarted(Q.E)||o.isGamepadButtonStarted(0,J.XSquare))&&i&&(n.useKey(this.doorColor),this.openDoor(),this.entity.area.game.resources.getResource("door-state").setColoredDoorOpened(this.row,this.column),this.entity.area.state.openDoor.play())}}}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}]),r}(V),It=(Et={},(0,p.Z)(Et,Dt.Red,new A.Wid({color:16711680,emissive:16711680,emissiveIntensity:.25})),(0,p.Z)(Et,Dt.Yellow,new A.Wid({color:16776960,emissive:16776960,emissiveIntensity:.25})),(0,p.Z)(Et,Dt.Green,new A.Wid({color:65280,emissive:65280,emissiveIntensity:.25})),(0,p.Z)(Et,Dt.Blue,new A.Wid({color:255,emissive:255,emissiveIntensity:.25})),Et),Lt=function(){function t(e,n,i){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["key"]),(0,p.Z)(this,"color",void 0),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"row",void 0),(0,p.Z)(this,"column",void 0),this.row=e,this.column=n,this.color=i}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t;var e=t.area.game.assets.getObject("Key").clone();e.position.copy(t.area.state.tileLocationToPosition(this.row,this.column)),e.position.y=2,e.rotation.y=lt(0,2*Math.PI),e.scale.set(.5,.25,.25),e.castShadow=!0,this.entity.object=e;var n=It[this.color];void 0!==n&&(e.material=n),this.entity.mask=new P(this.entity.object)}},{key:"onDestroy",value:function(){var t=this.entity.area.state;t.maze[this.row][this.column]=o.Empty,this.entity.area.game.resources.getResource("inventory").collectKey(this.color),t.collectItem.play()}},{key:"onStep",value:function(){this.entity.object.rotateY(Math.PI/256);var t=this.entity.area.findFirstEntity("player");null!==t&&this.entity.isCollidingWith(t)&&this.entity.destroy()}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}]),t}(),Ft=function(){function t(){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["hit-animation"]),(0,p.Z)(this,"entity",void 0)}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t,this.entity.setTimer(1,5,!1);var e=this.entity.area.state;e.oofSound.volume=.5,e.oofSound.isPlaying||e.oofSound.play()}},{key:"onDestroy",value:function(){}},{key:"onStep",value:function(){}},{key:"onTimer",value:function(t){this.entity.destroy()}},{key:"onDraw",value:function(t){t.globalAlpha=.5,t.strokeStyle="red",t.lineWidth=20,t.beginPath(),t.rect(0,0,this.entity.area.overlayWidth,this.entity.area.overlayHeight),t.stroke()}}]),t}();function Ot(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var Wt=new A.Kj0(new A.xo$,new A.vBJ({color:16755200}));Wt.scale.set(.15,.15,.15);var Gt,Nt=function(){function t(e){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["bullet"]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"position",void 0),(0,p.Z)(this,"rotation",void 0),this.position=e.object.position.clone(),this.rotation=e.object.rotation.clone()}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t;var e=Wt.clone();e.position.copy(this.position),e.rotation.copy(this.rotation),e.updateMatrix(),this.entity.object=e,this.entity.mask=new P(this.entity.object),this.entity.setTimer(0,250)}},{key:"onDestroy",value:function(){}},{key:"onStep",value:function(){this.entity.object.translateX(.5),this.entity.mask.update(this.entity.object),this.entity.mask.sphere.radius/=3,this.testForPlayerCollision(),this.testForWallCollision()}},{key:"testForPlayerCollision",value:function(){var t=this.entity.area.findFirstEntity("player");null!==t&&this.entity.isCollidingWith(t)&&(this.entity.area.game.resources.getResource("health").hit(1),this.entity.area.createEntity(new Ft),this.entity.destroy())}},{key:"testForWallCollision",value:function(){var t,e=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Ot(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ot(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}(this.entity.area.findEntities("wall"));try{for(e.s();!(t=e.n()).done;){var n=t.value;if(this.entity.isCollidingWith(n))return void this.entity.destroy()}}catch(t){e.e(t)}finally{e.f()}}},{key:"onTimer",value:function(t){this.entity.destroy()}},{key:"onDraw",value:function(t){}}]),t}(),Ht=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["explosion"]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"position",void 0),(0,p.Z)(this,"scale",void 0),(0,p.Z)(this,"scaleAnimation",Math.PI/2),this.position=e,this.scale=n}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t;var e=this.entity.area.game.assets.getObject("Explosion").clone();e.position.copy(this.position),e.scale.set(this.scale,this.scale,this.scale),this.entity.object=e;var n=this.entity.area.state;n.explosion.audio.playbackRate=2,n.explosion.play()}},{key:"onDestroy",value:function(){}},{key:"onStep",value:function(){var t=this.scale*Math.sin(this.scaleAnimation);this.entity.object.scale.set(t,t,t),this.scaleAnimation+=Math.PI/24,this.scaleAnimation>Math.PI&&this.entity.destroy()}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}]),t}();function zt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var Kt,_t,Yt=Math.PI/64,Ut=1e-4,Xt=1e-4,Vt=new Set([o.Wall,o.BigDoor]);!function(t){t[t.Moving=0]="Moving",t[t.Turning=1]="Turning"}(Kt||(Kt={})),function(t){t[t.Up=0]="Up",t[t.Down=1]="Down",t[t.Left=2]="Left",t[t.Right=3]="Right"}(_t||(_t={}));var $t,qt,Qt,Jt=(Gt={},(0,p.Z)(Gt,_t.Up,{opposite:_t.Down,angle:Math.PI,reverse:_t.Right}),(0,p.Z)(Gt,_t.Down,{opposite:_t.Up,angle:0,reverse:_t.Left}),(0,p.Z)(Gt,_t.Left,{opposite:_t.Right,angle:3*Math.PI/2,reverse:_t.Up}),(0,p.Z)(Gt,_t.Right,{opposite:_t.Left,angle:Math.PI/2,reverse:_t.Down}),Gt),te=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["drone"]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"row",void 0),(0,p.Z)(this,"column",void 0),(0,p.Z)(this,"state",Kt.Turning),(0,p.Z)(this,"dir",_t.Down),(0,p.Z)(this,"rotDir",Yt),(0,p.Z)(this,"angle",0),(0,p.Z)(this,"health",30),this.row=e,this.column=n}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t;var e=t.area.game.assets.getObject("Drone").clone();e.position.copy(t.area.state.tileLocationToPosition(this.row,this.column)),e.position.y=10,e.children[0].castShadow=!0,this.entity.object=e,this.entity.mask=new j(e.children[4]),this.entity.setTimer(0,10,!0),this.pickNewDirection()}},{key:"onDestroy",value:function(){}},{key:"onStep",value:function(){this.entity.mask.update(this.entity.object.children[4]),this.updateMazePosition(),this.canSeePlayer()&&this.inCenterOfTile()?this.pointTowardsPlayer():this.moveDrone(),this.checkForBulletCollision(),this.checkHealth()}},{key:"updateMazePosition",value:function(){var t=this.entity.area.state.positionToTileLocation(this.entity.object.position),e=(0,u.Z)(t,2);this.row=e[0],this.column=e[1]}},{key:"canSeePlayer",value:function(){var t=this,e=this.entity.area.findFirstEntity("player");if(null!==e){var n=e.object.position.clone();n.sub(this.entity.object.position);var i=n.length();if(i>=40)return!1;var r=new A.iMs(this.entity.object.position,n.normalize(),0,i);return this.entity.area.findEntities("wall").every((function(e){var n=e.mask.intersectRay(r.ray);return null===n||n.distanceTo(t.entity.object.position)>=i}))}}},{key:"inCenterOfTile",value:function(){return yt(this.entity.object.position.x/5,Ut)&&yt(this.entity.object.position.z/5,Ut)}},{key:"pointTowardsPlayer",value:function(){var t=this.entity.area.findFirstEntity("player");if(null!==t){var e=this.entity.object.position.clone();e.sub(t.object.position);var n=Math.atan2(-e.z,e.x)+Math.PI,i=Math.sqrt(e.z*e.z+e.x*e.x),r=-Math.atan2(e.y,i),o=new A.USm(0,n,r,"YXZ");this.entity.object.quaternion.setFromEuler(o)}}},{key:"moveDrone",value:function(){switch(this.entity.object.rotation.set(0,this.angle,0),this.state){case Kt.Moving:if(this.entity.object.translateX(.1),this.inCenterOfTile()){var t=this.entity.area.state.tileLocationToPosition(this.row,this.column);this.entity.object.position.x=t.x,this.entity.object.position.z=t.z,this.pickNewDirection(),this.state=Kt.Turning}break;case Kt.Turning:var e=Jt[this.dir].angle;n=this.angle,o=dt((r=e+Xt)-(i=e-Xt)),Math.abs(dt(i-n))<o&&Math.abs(dt(r-n))<o?(this.angle=e,this.state=Kt.Moving):this.angle+=this.rotDir}var n,i,r,o}},{key:"pickNewDirection",value:function(){var t=this.entity.area.state,e=[];if(Vt.has(t.maze[this.row-1][this.column])||e.push(_t.Up),Vt.has(t.maze[this.row+1][this.column])||e.push(_t.Down),Vt.has(t.maze[this.row][this.column-1])||e.push(_t.Left),Vt.has(t.maze[this.row][this.column+1])||e.push(_t.Right),e.length<=1)this.dir=e[0]||Jt[this.dir].opposite;else{var n=this.dir,i=Jt[this.dir].opposite,r=ht(e.filter((function(t){return t!==i})));this.rotDir=Jt[n].reverse===r?-Yt:Yt,this.dir=r}}},{key:"checkForBulletCollision",value:function(){var t,e=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return zt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?zt(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}(this.entity.area.findEntities("player-bullet"));try{for(e.s();!(t=e.n()).done;){var n=t.value;if(this.entity.isCollidingWith(n)){n.destroy(),this.health-=1;var i=this.entity.area.state;i.hitObject.volume=.125,i.hitObject.play()}}}catch(t){e.e(t)}finally{e.f()}}},{key:"checkHealth",value:function(){this.health<=0&&(this.entity.destroy(),this.entity.area.createEntity(new Ht(this.entity.object.position,2)))}},{key:"onTimer",value:function(t){if(0===t&&this.canSeePlayer()&&this.inCenterOfTile()){this.entity.area.createEntity(new Nt(this.entity));var e=this.entity.area.state;e.droneShoot.volume=.125,e.droneShoot.play()}}},{key:"onDraw",value:function(t){}}]),t}();function ee(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}!function(t){t[t.A=0]="A",t[t.B=1]="B",t[t.C=2]="C"}($t||($t={}));var ne=16,ie="#a0a914",re=(qt={},(0,p.Z)(qt,o.Wall,(function(t,e,n){t.fillStyle="#6b6764",t.fillRect(e,n,ne,ne)})),(0,p.Z)(qt,o.Energy,le("Energy")),(0,p.Z)(qt,o.RedDoor,ue("red",he)),(0,p.Z)(qt,o.YellowDoor,ue("yellow",he)),(0,p.Z)(qt,o.GreenDoor,ue("green",he)),(0,p.Z)(qt,o.BlueDoor,ue("blue",he)),(0,p.Z)(qt,o.RedKey,le("RedKey")),(0,p.Z)(qt,o.YellowKey,le("YellowKey")),(0,p.Z)(qt,o.GreenKey,le("GreenKey")),(0,p.Z)(qt,o.BlueKey,le("BlueKey")),(0,p.Z)(qt,o.Battery,le("Battery")),(0,p.Z)(qt,o.Lever,(function(t,e,n,i,r,o){le(o.area.game.resources.getResource("door-state").getToggleState()?"LeverReverse":"Lever")(t,e,n,i,r,o)})),(0,p.Z)(qt,o.ToggleDoor,ue("orange",ce())),(0,p.Z)(qt,o.InverseToggleDoor,ue("orange",ce(!0))),(0,p.Z)(qt,o.ADoor,ue("grey",fe($t.A))),(0,p.Z)(qt,o.BDoor,ue("grey",fe($t.B))),(0,p.Z)(qt,o.CDoor,ue("grey",fe($t.C))),(0,p.Z)(qt,o.ABox,le("ElectricBox")),(0,p.Z)(qt,o.BBox,le("ElectricBox")),(0,p.Z)(qt,o.CBox,le("ElectricBox")),(0,p.Z)(qt,o.BigDoor,ue("#654321",(function(t){return t.area.game.resources.getResource("door-state").isBigDoorOpened()}))),(0,p.Z)(qt,o.Portal,(function(t,e,n,i,r,o){var a=o.area.state;if(0===a.energyLeft?t.fillStyle="#5B00E7":t.fillStyle="#511f1f",t.fillRect(e-32/3,n+4,112/3,8),0===a.energyLeft){var s=o.area.game.assets.getImage("Energy");t.drawImage(s,e+4,n+4,8,8)}})),(0,p.Z)(qt,o.Gun,le("Gun")),(0,p.Z)(qt,o.Map,le("Map")),qt),oe=(Qt={},(0,p.Z)(Qt,Dt.Red,"RedKey"),(0,p.Z)(Qt,Dt.Yellow,"YellowKey"),(0,p.Z)(Qt,Dt.Green,"GreenKey"),(0,p.Z)(Qt,Dt.Blue,"BlueKey"),Qt),ae=function(){function t(){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["hud"]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"mapCanvas",void 0),(0,p.Z)(this,"mapVisited",void 0),(0,p.Z)(this,"shouldDrawMap",!1),(0,p.Z)(this,"message",""),this.mapCanvas=document.createElement("canvas")}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t;var e=t.area.state;this.mapVisited=Array(e.mazeHeight).fill(null).map((function(){return Array(e.mazeWidth).fill(null).map((function(){return!1}))})),this.entity.setTimer(0,24,!0),this.redrawMap()}},{key:"onDestroy",value:function(){}},{key:"onStep",value:function(){this.updateVisited();var t=this.entity.area.game.input;this.shouldDrawMap=t.isKeyDown(Q.Space)||t.isGamepadButtonDown(0,J.LeftBumper)||t.isGamepadButtonDown(0,J.YTriangle)}},{key:"updateVisited",value:function(){for(var t=this.entity.area.state,e=t.getPlayerTileLocation(),n=(0,u.Z)(e,2),i=n[0],r=n[1],o=-3;o<=3;o+=1)for(var a=-3;a<=3;a+=1)this.mapVisited[ct(i+o,0,t.mazeHeight-1)][ct(r+a,0,t.mazeWidth-1)]=!0}},{key:"redrawMap",value:function(){var t=this.entity.area.state,e=this.mapCanvas.getContext("2d"),n=t.mazeWidth*ne+8,i=t.mazeHeight*ne+8;this.mapCanvas.width=n,this.mapCanvas.height=i,e.fillStyle="#a0d914",e.fillRect(0,0,n,i);for(var r=0;r<t.mazeHeight;r+=1)for(var o=0;o<t.mazeWidth;o+=1){var a=4+o*ne,s=4+r*ne;if(this.mapVisited[r][o]){var l=re[t.maze[r][o]];void 0!==l&&l(e,a,s,r,o,this.entity)}else e.fillStyle="#3b3b3b",e.fillRect(a,s,ne,ne)}var h,c=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return ee(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ee(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}(this.entity.area.findEntities("drone"));try{for(c.s();!(h=c.n()).done;){var f=h.value,y=t.positionToTileLocation(f.object.position),d=(0,u.Z)(y,2),v=d[0],p=d[1];if(this.mapVisited[v][p]){var m=4+p*ne,g=4+v*ne;e.fillStyle="lightgrey",e.beginPath(),e.arc(m+8,g+8,ne/3,0,2*Math.PI),e.fill(),e.strokeStyle="black",e.lineWidth=1,e.stroke()}}}catch(t){c.e(t)}finally{c.f()}}},{key:"onTimer",value:function(t){0===t&&this.redrawMap()}},{key:"onDraw",value:function(t){this.shouldDrawMap?this.drawFullMap(t):this.drawHUD(t),this.message=""}},{key:"drawHUD",value:function(t){var e=this.entity.area.game.resources.getResource("inventory");e.hasCollectedMap()&&(this.drawHealthBar(t),this.drawMapSubset(t)),e.hasCollectedMap()&&e.hasCollectedGun()&&(this.drawInventory(t),this.drawMessage(t)),e.hasCollectedGun()&&this.drawTarget(t)}},{key:"drawHealthBar",value:function(t){t.textAlign="left",t.textBaseline="top",t.font="30px sans-serif",t.fillStyle="#ffffff",t.fillText("Health:",10,10),function(t,e,n,i,r,o,a,s){e=ct(e,0,1);var l=new A.Ilk;l.lerpColors(s,a,e),t.fillStyle="#"+l.getHexString(),t.fillRect(n,10,100*e,25),t.beginPath(),t.strokeStyle="black",t.rect(n,10,100,25),t.stroke()}(t,this.entity.area.game.resources.getResource("health").getHealthPercentLeft(),10+t.measureText("Health:").width+10,0,0,0,new A.Ilk(0,1,0),new A.Ilk(1,0,0))}},{key:"drawMapSubset",value:function(t){var e=this.entity.area.state,n=e.getPlayerTileLocation(),i=(0,u.Z)(n,2),r=i[0],o=i[1]-Math.floor(4.5),a=r-Math.floor(4.5),s=o*ne,l=a*ne,h=152,c=this.entity.area.overlayWidth-162;t.fillStyle=ie,t.fillRect(c,10,h,h),t.drawImage(this.mapCanvas,s,l,h,h,c,10,h,h),t.beginPath(),t.rect(c,10,h,h),t.strokeStyle="brown",t.lineWidth=4,t.stroke(),t.fillStyle="red",t.font="10pt sans-serif",t.textAlign="center",t.textBaseline="middle",t.fillText("N",c+76,25),t.fillStyle="white",t.fillText("S",c+76,147),t.fillText("W",c+15,86),t.fillText("E",c+h-15,86),t.strokeStyle="red",t.lineWidth=2,se(t,c+76,86,e.getPlayerAngle(),ne)}},{key:"drawInventory",value:function(t){var e=this.entity.area.state,n=this.entity.area.game.resources.getResource("inventory"),i=this.entity.area.game.assets,r=32;t.drawImage(i.getImage("Energy"),10,40,r,r),t.font="10pt sans-serif",t.fillStyle="white",t.textAlign="center",t.textBaseline="top",t.fillText("".concat(e.totalEnergy-e.energyLeft," / ").concat(e.totalEnergy),26,72);for(var o=50,a=0,s=[Dt.Red,Dt.Yellow,Dt.Green,Dt.Blue];a<s.length;a++){var l=s[a];if(n.hasKeyAvailable(l)){var u=i.getImage(oe[l]);t.drawImage(u,o,40,r,r),t.fillText("x".concat(n.getKeyCount(l)),o+16,72),o+=40}}if(n.hasCollectedBattery()){var h=i.getImage("Battery");t.drawImage(h,o,40,r,r),t.fillText("x".concat(n.getBatteryCount()),o+16,72),o+=40}}},{key:"drawMessage",value:function(t){if(!(this.message.length<=0)){t.font="24pt sans-serif",t.textAlign="center",t.textBaseline="bottom";var e=t.measureText(this.message),n=e.width+10,i=e.actualBoundingBoxAscent-e.fontBoundingBoxDescent+10,r=this.entity.area.overlayWidth/2,o=this.entity.area.overlayHeight-20;t.fillStyle="black",t.fillRect(r-n/2,o-i,n,i),t.lineWidth=2,t.strokeStyle="orange",t.beginPath(),t.rect(r-n/2,o-i,n,i),t.stroke(),t.fillStyle="white",t.fillText(this.message,r,o)}}},{key:"drawTarget",value:function(t){var e=this.entity.area.overlayWidth/2,n=this.entity.area.overlayHeight/2;t.lineWidth=1,t.strokeStyle="white",t.beginPath(),t.moveTo(e-5,n),t.lineTo(e+5,n),t.moveTo(e,n-5),t.lineTo(e,n+5),t.stroke()}},{key:"drawFullMap",value:function(t){if(this.entity.area.game.resources.getResource("inventory").hasCollectedMap()){var e=this.entity.area.state,n=e.getPlayerTileLocation(),i=(0,u.Z)(n,2),r=i[0],o=i[1],a=this.entity.area.overlayWidth-30,s=this.entity.area.overlayHeight-30,l=Math.min(a,this.mapCanvas.width),h=Math.min(s,this.mapCanvas.height),c=o*ne+8+4,f=r*ne+8+4,y=this.entity.area.overlayWidth/2-l/2,d=this.entity.area.overlayHeight/2-h/2;t.fillStyle=ie,t.fillRect(y,d,l,h),t.drawImage(this.mapCanvas,c-l/2,f-h/2,l,h,y,d,l,h),t.beginPath(),t.rect(y,d,l,h),t.strokeStyle="brown",t.lineWidth=4,t.stroke(),t.fillStyle="red",t.font="24pt sans-serif",t.textAlign="center",t.textBaseline="middle",t.fillText("N",y+l/2,d+25),t.fillStyle="white",t.fillText("S",y+l/2,d+h-25),t.fillText("W",y+25,d+h/2),t.fillText("E",y+l-25,d+h/2),t.strokeStyle="red",t.lineWidth=2,se(t,y+l/2,d+h/2,e.getPlayerAngle(),ne)}}}]),t}();function se(t,e,n,i,r){var o=e+r/2*Math.cos(i),a=n-r/2*Math.sin(i),s=e-r/2*Math.cos(i),l=n+r/2*Math.sin(i),u=Math.PI/6;t.beginPath(),t.moveTo(s,l),t.lineTo(o,a),t.lineTo(o-6*Math.cos(i-u),a+6*Math.sin(i-u)),t.moveTo(o,a),t.lineTo(o-6*Math.cos(i+u),a+6*Math.sin(i+u)),t.stroke()}function le(t){return function(e,n,i,r,o,a){var s=a.area.game.assets.getImage(t);e.drawImage(s,n,i,ne,ne)}}function ue(t,e){return function(n,i,r,o,a,s){e(s,o,a)?function(t){return function(e,n,i,r){e.fillStyle=t,r%2==1?(e.fillRect(n+4,i,8,2),e.fillRect(n+4,i+ne-2,8,2)):(e.fillRect(n,i+4,2,8),e.fillRect(n+ne-2,i+4,2,8))}}(t)(n,i,r,o,a,s):function(t){return function(e,n,i,r){e.fillStyle=t,r%2==1?e.fillRect(n+4,i,8,ne):e.fillRect(n,i+4,ne,8)}}(t)(n,i,r,o,a,s)}}function he(t,e,n){return t.area.game.resources.getResource("door-state").isColoredDoorOpened(e,n)}function ce(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return function(e){return e.area.game.resources.getResource("door-state").getToggleState()!==t}}function fe(t){return function(e){return e.area.game.resources.getResource("door-state").isDoorPowered(t)}}var ye=function(){function t(){(0,h.Z)(this,t),(0,p.Z)(this,"health",100)}return(0,c.Z)(t,[{key:"getHealthPercentLeft",value:function(){return this.health/100}},{key:"heal",value:function(t){this.health=Math.min(this.health+t,100)}},{key:"hit",value:function(t){this.health=Math.max(this.health-t,0)}},{key:"hasHealthLeft",value:function(){return this.health>0}}]),t}(),de=function(){function t(){var e;(0,h.Z)(this,t),(0,p.Z)(this,"mapCollected",!1),(0,p.Z)(this,"gunCollected",!1),(0,p.Z)(this,"keysCollected",(e={},(0,p.Z)(e,Dt.Red,0),(0,p.Z)(e,Dt.Yellow,0),(0,p.Z)(e,Dt.Green,0),(0,p.Z)(e,Dt.Blue,0),e)),(0,p.Z)(this,"batteryCollected",0)}return(0,c.Z)(t,[{key:"collectMap",value:function(){this.mapCollected=!0}},{key:"hasCollectedMap",value:function(){return this.mapCollected}},{key:"collectGun",value:function(){this.gunCollected=!0}},{key:"hasCollectedGun",value:function(){return this.gunCollected}},{key:"collectKey",value:function(t){this.keysCollected[t]+=1}},{key:"getKeyCount",value:function(t){return this.keysCollected[t]}},{key:"hasKeyAvailable",value:function(t){return this.getKeyCount(t)>0}},{key:"useKey",value:function(t){return this.keysCollected[t]>0&&(this.keysCollected[t]-=1,!0)}},{key:"collectBattery",value:function(){this.batteryCollected+=1}},{key:"getBatteryCount",value:function(){return this.batteryCollected}},{key:"hasCollectedBattery",value:function(){return this.batteryCollected>0}},{key:"useBattery",value:function(){return this.batteryCollected>0&&(this.batteryCollected-=1,!0)}}]),t}(),ve=new A.cJO(1,3),pe=new A.Wid({color:16744448,emissive:16711680}),me=Math.PI/24,ge=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["energy"]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"row",void 0),(0,p.Z)(this,"column",void 0),(0,p.Z)(this,"scale",0),this.row=e,this.column=n}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t;var e=new A.Kj0(ve,pe);e.position.copy(t.area.state.tileLocationToPosition(this.row,this.column)),e.position.y=2.5,e.castShadow=!0,this.entity.object=e,this.entity.mask=new j(e)}},{key:"onDestroy",value:function(){var t=this.entity.area.state;t.maze[this.row][this.column]=o.Empty,0===t.energyLeft?(t.activatePortal.volume=.5,t.activatePortal.play()):t.collectItem.play()}},{key:"onStep",value:function(){this.playScaleAnimation(),this.checkForPlayerCollision()}},{key:"playScaleAnimation",value:function(){var t=1+.1*Math.sin(this.scale);this.scale+=me,this.entity.object.scale.set(t,t,t),this.entity.mask.update(this.entity.object)}},{key:"checkForPlayerCollision",value:function(){var t=this.entity.area.findFirstEntity("player");null!==t&&this.entity.isCollidingWith(t)&&this.entity.destroy()}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}]),t}(),ke=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["lever"]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"row",void 0),(0,p.Z)(this,"column",void 0),(0,p.Z)(this,"mixer",void 0),(0,p.Z)(this,"leverAction",void 0),(0,p.Z)(this,"open",!1),this.row=e,this.column=n}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t;var e=this.entity.area.game.assets.getObject("Lever").clone();e.position.copy(t.area.state.tileLocationToPosition(this.row,this.column)),e.scale.set(1.5,1.5,1.5),e.castShadow=!0,e.children[0].castShadow=!0,this.entity.object=e,this.entity.mask=new P(e),this.mixer=new A.Xcj(e),this.leverAction=this.mixer.clipAction(t.area.game.assets.getAnimation("LeverAction")),this.leverAction.loop=A.jAl,this.leverAction.repetitions=1,this.leverAction.clampWhenFinished=!0}},{key:"onDestroy",value:function(){}},{key:"onStep",value:function(){this.mixer.update(.02),this.testForPlayerInteraction()}},{key:"testForPlayerInteraction",value:function(){var t=this.entity.area.findFirstEntity("player");if(null!==t&&this.entity.isCollidingWith(t)){var e=this.entity.area.findFirstEntity("hud");if(null!==e){if(e.state.message.length>0||this.leverAction.isRunning())return;e.state.message="Action: Pull Lever"}this.leverAction.isRunning()||this.checkInteractionInput()}}},{key:"checkInteractionInput",value:function(){var t=this.entity.area.game.input;if(t.isKeyStarted(Q.E)||t.isGamepadButtonStarted(0,J.XSquare)){this.open?this.closeLever():this.openLever(),this.entity.area.game.resources.getResource("door-state").toggleDoors();var e=this.entity.area.state;e.toggleLever.play(),e.openDoor.play()}}},{key:"openLever",value:function(){this.open=!0,this.leverAction.timeScale=1,this.leverAction.paused=!1,this.leverAction.play()}},{key:"closeLever",value:function(){this.open=!1,this.leverAction.timeScale=-1,this.leverAction.time=this.leverAction.getClip().duration,this.leverAction.paused=!1,this.leverAction.play()}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}]),t}();function Ze(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var be=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["rock"]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"row",void 0),(0,p.Z)(this,"column",void 0),(0,p.Z)(this,"health",10),this.row=e,this.column=n}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t;var e=t.area.game.assets.getObject("Rock").clone();e.scale.set(2.5,2.5,2.5),e.position.copy(t.area.state.tileLocationToPosition(this.row,this.column)),e.castShadow=!0,this.entity.object=e,this.entity.mask=new j(e)}},{key:"onDestroy",value:function(){this.entity.area.state.maze[this.row][this.column]=o.Empty}},{key:"onStep",value:function(){this.checkForBulletCollision(),this.checkHealth()}},{key:"checkForBulletCollision",value:function(){var t,e=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Ze(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ze(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}(this.entity.area.findEntities("player-bullet"));try{for(e.s();!(t=e.n()).done;){var n=t.value;if(this.entity.isCollidingWith(n)){var i=this.entity.area.state;i.hitObject.volume=.125,i.hitObject.play(),n.destroy(),this.health-=1}}}catch(t){e.e(t)}finally{e.f()}}},{key:"checkHealth",value:function(){if(this.health<=0){this.entity.destroy();var t=this.entity.object.position.clone();t.y+=5/4,this.entity.area.createEntity(new Ht(t,2.5))}}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}]),t}(),we=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["battery"]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"row",void 0),(0,p.Z)(this,"column",void 0),this.row=e,this.column=n}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t;var e=this.entity.area.game.assets.getObject("Battery").clone();e.position.copy(t.area.state.tileLocationToPosition(this.row,this.column)),e.position.y=2,e.scale.set(2,2,2),e.children[2].castShadow=!0,this.entity.object=e,this.entity.mask=new j(e)}},{key:"onDestroy",value:function(){var t=this.entity.area.state;t.maze[this.row][this.column]=o.Empty,this.entity.area.game.resources.getResource("inventory").collectBattery(),t.collectItem.play()}},{key:"onStep",value:function(){var t=this.entity.area.findFirstEntity("player");null!==t&&this.entity.isCollidingWith(t)&&this.entity.destroy()}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}]),t}(),Ae=function(){function t(e,n,i){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["electric-box","wall"]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"row",void 0),(0,p.Z)(this,"column",void 0),(0,p.Z)(this,"type",void 0),(0,p.Z)(this,"hasBattery",!1),(0,p.Z)(this,"interactMask",void 0),(0,p.Z)(this,"mixer",void 0),(0,p.Z)(this,"insertBattery",void 0),(0,p.Z)(this,"spinWheel",void 0),(0,p.Z)(this,"batteryObject",void 0),this.row=e,this.column=n,this.type=i}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t;var e=this.entity.area.game.assets.getObject("ElectricBox").clone();e.position.copy(t.area.state.tileLocationToPosition(this.row,this.column)),e.children[0].castShadow=!0,e.children[3].castShadow=!0,this.batteryObject=e.children[2],this.batteryObject.visible=!1,this.entity.object=e,this.entity.mask=new j(e),this.interactMask=new P(e),this.interactMask.sphere.radius*=1.5,this.mixer=new A.Xcj(e),this.insertBattery=this.mixer.clipAction(t.area.game.assets.getAnimation("BatteryAction")),this.insertBattery.loop=A.jAl,this.insertBattery.clampWhenFinished=!0,this.spinWheel=this.mixer.clipAction(t.area.game.assets.getAnimation("WheelAction")),this.spinWheel.loop=A.YKA,this.spinWheel.repetitions=1/0,this.spinWheel.paused=!0,this.spinWheel.play()}},{key:"onDestroy",value:function(){}},{key:"onStep",value:function(){if(this.mixer.update(.01),this.testForPlayerInteraction(),this.hasBattery&&!this.insertBattery.isRunning()&&!this.spinWheel.isRunning()){this.spinWheel.paused=!1,this.entity.area.game.resources.getResource("door-state").setDoorPowered(this.type,!0);var t=this.entity.area.state;t.electricBox.volume=.25,t.electricBox.play()}this.hasBattery||this.insertBattery.isRunning()||!this.batteryObject.visible||(this.batteryObject.visible=!1,this.entity.area.game.resources.getResource("inventory").collectBattery())}},{key:"testForPlayerInteraction",value:function(){var t=this.entity.area.findFirstEntity("player");if(null!==t&&this.interactMask.isCollidingWith(t.mask)){var e=this.entity.area.findFirstEntity("hud");if(null!==e){var n=this.entity.area.game.resources.getResource("inventory");if(e.state.message.length>0||this.insertBattery.isRunning())return;this.hasBattery?e.state.message="Action: Take Battery":e.state.message=n.hasCollectedBattery()?"Action: Insert Battery":"Needs a battery for power"}this.insertBattery.isRunning()||this.checkInteractionInput()}}},{key:"checkInteractionInput",value:function(){var t=this.entity.area.game.input;if(t.isKeyStarted(Q.E)||t.isGamepadButtonStarted(0,J.XSquare)){var e=this.entity.area.game.resources.getResource("inventory");if(this.hasBattery){this.spinWheel.paused=!0,this.insertBattery.timeScale=-1,this.insertBattery.paused=!1,this.insertBattery.play(),this.entity.area.game.resources.getResource("door-state").setDoorPowered(this.type,!1),this.hasBattery=!1;var n=this.entity.area.state;n.toggleLever.play(),n.openDoor.play()}else e.hasCollectedBattery()&&(this.insertBattery.timeScale=1,this.batteryObject.visible=!0,this.insertBattery.paused=!1,this.insertBattery.play(),e.useBattery(),this.hasBattery=!0)}}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}]),t}(),Se=function(){function t(){var e;(0,h.Z)(this,t),(0,p.Z)(this,"bigDoorOpened",!1),(0,p.Z)(this,"coloredDoors",new Set),(0,p.Z)(this,"toggle",!1),(0,p.Z)(this,"powered",(e={},(0,p.Z)(e,$t.A,!1),(0,p.Z)(e,$t.B,!1),(0,p.Z)(e,$t.C,!1),e))}return(0,c.Z)(t,[{key:"isBigDoorOpened",value:function(){return this.bigDoorOpened}},{key:"openBigDoor",value:function(){this.bigDoorOpened=!0}},{key:"isColoredDoorOpened",value:function(t,e){return this.coloredDoors.has("".concat(t,"-").concat(e))}},{key:"setColoredDoorOpened",value:function(t,e){this.coloredDoors.add("".concat(t,"-").concat(e))}},{key:"getToggleState",value:function(){return this.toggle}},{key:"toggleDoors",value:function(){this.toggle=!this.toggle}},{key:"isDoorPowered",value:function(t){return this.powered[t]}},{key:"setDoorPowered",value:function(t,e){this.powered[t]=e}}]),t}();var De=function(t){(0,y.Z)(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=(0,v.Z)(e);if(n){var r=(0,v.Z)(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return(0,d.Z)(this,t)});function r(t,e){var n,o=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return(0,h.Z)(this,r),n=i.call(this,t,e,"ToggleDoor"),(0,p.Z)((0,f.Z)(n),"tags",["wall"]),(0,p.Z)((0,f.Z)(n),"reverse",void 0),(0,p.Z)((0,f.Z)(n),"interactMask",void 0),n.reverse=o,n}return(0,c.Z)(r,[{key:"onCreateDoor",value:function(){this.interactMask=new P(this.entity.object)}},{key:"onDestroy",value:function(){}},{key:"onStepDoor",value:function(){this.syncWithState(),this.testForPlayerInteraction()}},{key:"syncWithState",value:function(){var t=this.entity.area.game.resources.getResource("door-state"),e=this.reverse?!t.getToggleState():t.getToggleState();this.open!==e&&(this.open?this.closeDoor():this.openDoor())}},{key:"testForPlayerInteraction",value:function(){if(!this.open){var t=this.entity.area.findFirstEntity("player");if(null!==t&&this.interactMask.isCollidingWith(t.mask)){var e=this.entity.area.findFirstEntity("hud");null!==e&&0===e.state.message.length&&(e.state.message="Flip lever to toggle door")}}}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}]),r}(V);var xe=function(t){(0,y.Z)(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=(0,v.Z)(e);if(n){var r=(0,v.Z)(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return(0,d.Z)(this,t)});function r(t,e,n){var o;return(0,h.Z)(this,r),o=i.call(this,t,e,"ElectricDoor"),(0,p.Z)((0,f.Z)(o),"tags",["wall"]),(0,p.Z)((0,f.Z)(o),"type",void 0),(0,p.Z)((0,f.Z)(o),"interactMask",void 0),o.type=n,o}return(0,c.Z)(r,[{key:"onCreateDoor",value:function(){this.interactMask=new P(this.entity.object)}},{key:"onDestroy",value:function(){}},{key:"onStepDoor",value:function(){this.syncWithState(),this.testForPlayerInteraction()}},{key:"syncWithState",value:function(){var t=this.entity.area.game.resources.getResource("door-state");this.open!==t.isDoorPowered(this.type)&&(this.open?this.closeDoor():this.openDoor())}},{key:"testForPlayerInteraction",value:function(){if(!this.open){var t=this.entity.area.findFirstEntity("player");if(null!==t&&this.interactMask.isCollidingWith(t.mask)){var e=this.entity.area.findFirstEntity("hud");null!==e&&0===e.state.message.length&&(e.state.message="Door needs to be powered")}}}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}]),r}(V),Te=function(){function t(){(0,h.Z)(this,t),(0,p.Z)(this,"area",void 0),(0,p.Z)(this,"heartMonitor",void 0),(0,p.Z)(this,"startTime",void 0),(0,p.Z)(this,"alpha",0)}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.area=t,this.heartMonitor=this.area.createAudio("HeartMonitor"),this.heartMonitor.volume=0,this.heartMonitor.play(!0),this.startTime=this.heartMonitor.audio.context.currentTime,this.area.setTimer(1,10,!0),this.area.setTimer(2,300,!1)}},{key:"onTimer",value:function(t){1===t&&this.fadeInSound(),2===t&&this.fadeInText(),3===t&&this.fadeOutText(),4===t&&this.area.game.setArea(new In)}},{key:"fadeInSound",value:function(){this.heartMonitor.volume=Math.min(1,this.heartMonitor.volume+.05),this.heartMonitor.volume>=1&&this.area.clearTimer(1)}},{key:"fadeInText",value:function(){this.alpha=Math.min(1,this.alpha+.1),this.alpha>=1?(this.area.clearTimer(2),this.area.setTimer(3,500,!1)):this.area.setTimer(2,10,!1)}},{key:"fadeOutText",value:function(){this.alpha=Math.max(0,this.alpha-.05),this.heartMonitor.volume=Math.max(0,this.heartMonitor.volume-.05),this.alpha<=0&&this.heartMonitor.volume<=0?(this.area.clearTimer(3),this.heartMonitor.stop(),this.heartMonitor.volume=0,this.area.setTimer(4,200,!1)):this.area.setTimer(3,15,!1)}},{key:"onStep",value:function(){this.area.game.input.isMouseButtonDown(et.Left)&&this.heartMonitor.audio.context.resume()}},{key:"onDraw",value:function(t){t.font="20pt sans-serif",t.textAlign="center",t.textBaseline="middle",t.fillStyle="white",t.globalAlpha=this.alpha,t.fillText("Good news: the operation was successful!",this.area.overlayWidth/2,this.area.overlayHeight/4),t.fillText("You just woke up from the coma.",this.area.overlayWidth/2,this.area.overlayHeight/2),t.fillText("We expect you to make a full recovery.",this.area.overlayWidth/2,3*this.area.overlayHeight/4);var e=(this.heartMonitor.audio.context.currentTime-this.startTime)%this.heartMonitor.audio.buffer.duration;e>=.5&&e<1&&this.heartMonitor.volume>0&&(t.globalAlpha=this.heartMonitor.volume,t.beginPath(),t.strokeStyle="green",t.lineWidth=20,t.strokeRect(0,0,this.area.overlayWidth,this.area.overlayHeight),t.stroke()),t.globalAlpha=1}}]),t}(),Me=function(){function t(){(0,h.Z)(this,t),(0,p.Z)(this,"tags",[]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"fadeAlpha",0),(0,p.Z)(this,"blackAlpha",0)}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t,this.entity.setTimer(1,15,!0),this.entity.area.state.enterPortal.play()}},{key:"onDestroy",value:function(){}},{key:"onStep",value:function(){}},{key:"onTimer",value:function(t){1===t&&(this.fadeForestAmbience(),this.fadeOut()),2===t&&this.fadeToBlack(),3===t&&this.entity.area.game.setArea(new Te)}},{key:"fadeForestAmbience",value:function(){this.entity.area.state.forestAmbience.volume=1-this.fadeAlpha}},{key:"fadeOut",value:function(){this.fadeAlpha=ct(this.fadeAlpha+.1,0,1),this.fadeAlpha>=1&&(this.entity.clearTimer(1),this.entity.area.state.forestAmbience.stop(),this.entity.setTimer(2,10,!0))}},{key:"fadeToBlack",value:function(){this.blackAlpha=ct(this.blackAlpha+.1,0,1),this.blackAlpha>=1&&(this.entity.clearTimer(2),this.entity.setTimer(3,200,!1))}},{key:"onDraw",value:function(t){t.globalAlpha=this.fadeAlpha,t.fillStyle="#29004a",t.fillRect(0,0,this.entity.area.overlayWidth,this.entity.area.overlayHeight),t.globalAlpha=this.blackAlpha,t.fillStyle="black",t.fillRect(0,0,this.entity.area.overlayWidth,this.entity.area.overlayHeight),t.globalAlpha=1}}]),t}();function Ce(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Be(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Be(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function Be(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var Re=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["wall"]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"row",void 0),(0,p.Z)(this,"column",void 0),(0,p.Z)(this,"interactMask",void 0),(0,p.Z)(this,"exitMask",void 0),(0,p.Z)(this,"portalObject",void 0),(0,p.Z)(this,"ballMat",void 0),(0,p.Z)(this,"mixer",void 0),(0,p.Z)(this,"portalAction",void 0),this.row=e,this.column=n}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t;var e=this.entity.area.game.assets.getObject("Portal").clone();e.position.copy(t.area.state.tileLocationToPosition(this.row,this.column)),e.position.y=-.5,e.scale.set(2,2,2),e.updateWorldMatrix(!1,!0);var n,i=Ce(e.children);try{for(i.s();!(n=i.n()).done;)n.value.castShadow=!0}catch(t){i.e(t)}finally{i.f()}this.entity.object=e,this.portalObject=e.children[2],this.portalObject.visible=!1,this.ballMat=e.children[4].material,this.ballMat.color.set(3289650);var r=new j(e.children[1]),o=new j(e.children[3]);this.entity.mask=new I(r,o),this.interactMask=new P(e.children[2]),this.exitMask=new j(e.children[2]),this.mixer=new A.Xcj(e),this.portalAction=this.mixer.clipAction(t.area.game.assets.getAnimation("PortalEnergyAction")),this.portalAction.loop=A.uEv}},{key:"onDestroy",value:function(){}},{key:"onStep",value:function(){this.mixer.update(.01),this.portalObject.visible?this.testPlayerEntersPortal():(this.testActivatePortal(),this.handleUserMessage())}},{key:"testActivatePortal",value:function(){0===this.entity.area.state.energyLeft&&(this.portalObject.visible=!0,this.ballMat.color.set(13386496),this.portalAction.play())}},{key:"handleUserMessage",value:function(){var t=this.entity.area.findFirstEntity("player");if(null!==t&&this.interactMask.isCollidingWith(t.mask)){var e=this.entity.area.state,n=this.entity.area.findFirstEntity("hud");null!==n&&0===n.state.message.length&&(n.state.message="Portal requires "+e.totalEnergy+" total energy to activate")}}},{key:"testPlayerEntersPortal",value:function(){var t=this.entity.area.findFirstEntity("player");if(null!==t&&this.exitMask.isCollidingWith(t.mask)){t.destroy();var e,n=Ce(this.entity.area.findEntities("hud"));try{for(n.s();!(e=n.n()).done;)e.value.destroy()}catch(t){n.e(t)}finally{n.f()}this.entity.area.createEntity(new Me)}}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}]),t}();var Ee=function(t){(0,y.Z)(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=(0,v.Z)(e);if(n){var r=(0,v.Z)(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return(0,d.Z)(this,t)});function r(t,e){var n;return(0,h.Z)(this,r),n=i.call(this,t,e,"Door"),(0,p.Z)((0,f.Z)(n),"tags",["wall"]),(0,p.Z)((0,f.Z)(n),"showMessage",!1),n}return(0,c.Z)(r,[{key:"onCreateDoor",value:function(){this.entity.object.scale.y=20/3,this.entity.object.scale.x=10,this.entity.object.children[0].visible=!1}},{key:"onDestroy",value:function(){}},{key:"onStepDoor",value:function(){if(this.testIfAllItemsCollected(),this.showMessage){var t=this.entity.area.findFirstEntity("hud");null!==t&&(t.state.message="Collect all energy to activate the portal!")}}},{key:"testIfAllItemsCollected",value:function(){if(!this.open){var t=this.entity.area.game.resources.getResource("inventory");t.hasCollectedGun()&&t.hasCollectedMap()&&this.openBigDoor()}}},{key:"openBigDoor",value:function(){this.entity.area.game.resources.getResource("door-state").openBigDoor(),this.openDoor(1/8),this.showMessage=!0,this.entity.setTimer(0,400,!1);var t=this.entity.area.state;t.openBigDoor.volume=8,t.openBigDoor.play()}},{key:"onTimer",value:function(t){0===t&&(this.showMessage=!1)}},{key:"onDraw",value:function(t){}}]),r}(V);function je(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Pe(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Pe(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function Pe(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var Ie=function(){function t(){(0,h.Z)(this,t)}return(0,c.Z)(t,[{key:"addAll",value:function(t){var e,n=je(t);try{for(n.s();!(e=n.n()).done;){var i=e.value;this.add(i)}}catch(t){n.e(t)}finally{n.f()}}},{key:"addRecursive",value:function(t){this.add(t);var e,n=je(t.children);try{for(n.s();!(e=n.n()).done;){var i=e.value;this.addRecursive(i)}}catch(t){n.e(t)}finally{n.f()}}},{key:"addParents",value:function(t){this.add(t),null!==t.parent&&this.addParents(t.parent)}},{key:"removeAll",value:function(t){var e,n=je(t);try{for(n.s();!(e=n.n()).done;){var i=e.value;this.remove(i)}}catch(t){n.e(t)}finally{n.f()}}},{key:"removeRecursive",value:function(t){this.remove(t);var e,n=je(t.children);try{for(n.s();!(e=n.n()).done;){var i=e.value;this.removeRecursive(i)}}catch(t){n.e(t)}finally{n.f()}}},{key:"removeParents",value:function(t){this.remove(t),null!==t.parent&&this.removeParents(t.parent)}}]),t}();var Le=function(t){(0,y.Z)(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=(0,v.Z)(e);if(n){var r=(0,v.Z)(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return(0,d.Z)(this,t)});function r(t){var e;return(0,h.Z)(this,r),e=i.call(this),(0,p.Z)((0,f.Z)(e),"set",new Set),void 0!==t&&e.addRecursive(t),e}return(0,c.Z)(r,[{key:"hasNode",value:function(t){return this.set.has(t)}},{key:"add",value:function(t){this.set.add(t)}},{key:"remove",value:function(t){this.set.delete(t)}},{key:"getAllNodes",value:function(){return Array.from(this.set)}},{key:"size",get:function(){return this.set.size}},{key:"pickAnyRandom",value:function(){var t=this.getAllNodes();return 0===t.length?null:ht(t)}}]),r}(Ie);function Fe(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Oe(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Oe(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function Oe(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var We=function(){function t(e){(0,h.Z)(this,t),(0,p.Z)(this,"root",void 0),(0,p.Z)(this,"maxDoors",void 0),(0,p.Z)(this,"lever",void 0),(0,p.Z)(this,"regularToggleDoors",new Set),(0,p.Z)(this,"allowdSpots",void 0),this.root=e}return(0,c.Z)(t,[{key:"generateInverseToggleDoors",value:function(){this.findToggleDoors(this.root),this.maxDoors=this.regularToggleDoors.size,this.allowdSpots=new Le(this.root);var e,n=Fe(this.regularToggleDoors);try{for(n.s();!(e=n.n()).done;){var i=e.value,r=t.findPathBetween(i,this.lever);this.allowdSpots.removeAll(r)}}catch(t){n.e(t)}finally{n.f()}var a,s=Fe(this.regularToggleDoors);try{for(s.s();!(a=s.n()).done;){var l=a.value;this.allowdSpots.removeRecursive(l)}}catch(t){s.e(t)}finally{s.f()}var u,h=Fe(this.allowdSpots.getAllNodes());try{for(h.s();!(u=h.n()).done;){var c=u.value;c.object!==o.Empty&&this.allowdSpots.remove(c)}}catch(t){h.e(t)}finally{h.f()}var f,y=Fe(this.allowdSpots.getAllNodes());try{for(y.s();!(f=y.n()).done;){var d=f.value;d.row%2!=0&&d.column%2!=0&&this.allowdSpots.remove(d)}}catch(t){y.e(t)}finally{y.f()}for(var v=0;v<this.regularToggleDoors.size;v+=1){var p=this.allowdSpots.pickAnyRandom();if(null===p)return;this.allowdSpots.remove(p),p.object=o.InverseToggleDoor}}},{key:"findToggleDoors",value:function(t){t.object===o.Lever?this.lever=t:t.object===o.ToggleDoor&&this.regularToggleDoors.add(t);var e,n=Fe(t.children);try{for(n.s();!(e=n.n()).done;){var i=e.value;this.findToggleDoors(i)}}catch(t){n.e(t)}finally{n.f()}}}],[{key:"findPathBetween",value:function(t,e){for(var n=[t],i=t.parent;null!==i;)n.push(i),i=i.parent;var r=[e];for(i=e.parent;null!==i;)r.push(i),i=i.parent;for(n.reverse(),r.reverse();n.length>0&&r.length>0&&n[0]===r[0];)n.shift(),r.shift();var o=[].concat(n,r);return n.length>0?o.push(n[0].parent):r.length>0&&o.push(r[0].parent),o}}]),t}();function Ge(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Ne(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ne(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function Ne(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var He=function(t){(0,y.Z)(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=(0,v.Z)(e);if(n){var r=(0,v.Z)(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return(0,d.Z)(this,t)});function r(t){var e;return(0,h.Z)(this,r),e=i.call(this),(0,p.Z)((0,f.Z)(e),"vertices",new Map),(0,p.Z)((0,f.Z)(e),"highest",0),void 0!==t&&e.addRecursive(t),e}return(0,c.Z)(r,[{key:"highestDepth",get:function(){return this.highest}},{key:"hasNode",value:function(t){return this.vertices.has(t.depth)&&this.vertices.get(t.depth).has(t)}},{key:"add",value:function(t){this.vertices.has(t.depth)||this.vertices.set(t.depth,new Set),this.vertices.get(t.depth).add(t),this.highest=Math.max(this.highest,t.depth)}},{key:"remove",value:function(t){this.vertices.has(t.depth)&&this.vertices.get(t.depth).delete(t)}},{key:"pickRandom",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,i=this.getAllNodesBy(t,e,n);return 0===i.length?null:ht(i)}},{key:"size",get:function(){var t,e=0,n=Ge(this.vertices);try{for(n.s();!(t=n.n()).done;){var i=(0,u.Z)(t.value,2);i[0],e+=i[1].size}}catch(t){n.e(t)}finally{n.f()}return e}},{key:"getAllNodes",value:function(){var t,e=[],n=Ge(this.vertices);try{for(n.s();!(t=n.n()).done;){var i=t.value;e.push.apply(e,(0,D.Z)(i[1]))}}catch(t){n.e(t)}finally{n.f()}return e}},{key:"getAllNodesBy",value:function(t,e){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,i=[],r=t;r<=e;r+=1)if(this.vertices.has(r)){var o=this.vertices.get(r);i.push.apply(i,(0,D.Z)(o))}return i.filter((function(t){return t.absoluteDepth>=n}))}}]),r}(Ie);function ze(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Ke(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ke(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function Ke(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var _e=function(){function t(e){(0,h.Z)(this,t),(0,p.Z)(this,"root",void 0),(0,p.Z)(this,"hist",void 0),(0,p.Z)(this,"minDepth",void 0),(0,p.Z)(this,"doorsLeft",void 0),(0,p.Z)(this,"itemsNeeded",void 0),(0,p.Z)(this,"itemsReused",void 0),this.root=e}return(0,c.Z)(t,[{key:"generateMainPath",value:function(){do{this.resetAlgorithm(),this.runAlgorithmOnce()}while(this.doorsLeft.size>0)}},{key:"resetAlgorithm",value:function(){t.resetVertices(this.root),this.hist=new He(this.root),this.minDepth=Math.max(0,this.hist.highestDepth-Math.floor(2.5)),this.doorsLeft=new Set(k),this.itemsNeeded=[],this.itemsReused=new Set}},{key:"runAlgorithmOnce",value:function(){var e=this.pickRandomDoorLocation();if(null!==e){this.hist.removeRecursive(e),this.shiftMinDepth();var n=ht(Array.from(this.doorsLeft));this.doorsLeft.delete(n),e.object=n,t.putEnergyBehind(e),this.computeItemsNeeded(n);t:for(;this.itemsNeeded.length>0;){var i=(0,D.Z)(this.itemsNeeded);this.itemsNeeded=[];var r,a=ut(0,i.length-1),s=void 0,l=ze(i.entries());try{for(l.s();!(r=l.n()).done;){var h=(0,u.Z)(r.value,2),c=h[0],f=h[1],y=this.pickRandomItemLocation();if(null===y){e.object=o.Empty,this.doorsLeft.add(n);break t}y.object=f,this.hist.removeRecursive(y),c===a&&(s=y)}}catch(t){l.e(t)}finally{l.f()}if(this.doorsLeft.size>0){if(null===(e=this.pickRandomParentDoorLocation(s)))break t;this.hist.removeRecursive(e),n=ht(Array.from(this.doorsLeft)),this.doorsLeft.delete(n),e.object=n,this.computeItemsNeeded(n)}this.shiftMinDepth()}}}},{key:"pickRandomDoorLocation",value:function(){var t=this.hist.pickRandom(this.minDepth,this.minDepth+5,9);return null===t?null:t.row%2!=0&&t.column%2!=0?t.parent:t}},{key:"pickRandomParentDoorLocation",value:function(t){for(var e=new Le,n=t,i=0;i<7&&null!==n;i+=1)n=n.parent,i<3||n.object===o.Empty&&(n.row%2!=0&&n.column%2!=0||e.add(n));return e.pickAnyRandom()}},{key:"pickRandomItemLocation",value:function(){return this.hist.pickRandom(this.minDepth,this.minDepth+5,9)}},{key:"shiftMinDepth",value:function(){this.minDepth=Math.max(0,this.minDepth-1)}},{key:"computeItemsNeeded",value:function(t){var e=Z[t];void 0!==e.oneTimeItem&&this.itemsNeeded.push(e.oneTimeItem),void 0===e.reuseItem||this.itemsReused.has(e.reuseItem)||(this.itemsNeeded.push(e.reuseItem),this.itemsReused.add(e.reuseItem))}}],[{key:"resetVertices",value:function(e){e.object=o.Empty;var n,i=ze(e.children);try{for(i.s();!(n=i.n()).done;){var r=n.value;t.resetVertices(r)}}catch(t){i.e(t)}finally{i.f()}}},{key:"putEnergyBehind",value:function(t){var e=new Le(t);e.remove(t);var n,i=ze(e.getAllNodes());try{for(i.s();!(n=i.n()).done;){var r=n.value;r.object!==o.Empty&&e.remove(r)}}catch(t){i.e(t)}finally{i.f()}var a=e.pickAnyRandom();null!==a&&(a.object=o.Energy)}}]),t}();function Ye(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Ue(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ue(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function Ue(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var Xe=function(){function t(e,n,i,r){(0,h.Z)(this,t),(0,p.Z)(this,"width",void 0),(0,p.Z)(this,"height",void 0),(0,p.Z)(this,"centerWidth",void 0),(0,p.Z)(this,"centerHeight",void 0),(0,p.Z)(this,"walls",void 0),this.width=2*e+1,this.height=2*n+1,this.centerWidth=i,this.centerHeight=r}return(0,c.Z)(t,[{key:"generateRandomMaze",value:function(){var t=this;this.walls=Array(this.height).fill(null).map((function(){return Array(t.width).fill(null).map((function(){return!0}))})),this.chiselHoles(),this.fillCenterTemplate();var e=function(t,e,n){var i,r=n(t),o=[r],a=new Map,s=Ye(t);try{for(s.s();!(i=s.n()).done;){var l=i.value;a.set(l,[])}}catch(t){s.e(t)}finally{s.f()}for(;r;){var u=t.filter((function(t){return!a.get(t).length&&e(r,t)}));if(u.length){var h=n(u);a.get(r).push(h),a.get(h).push(r),o.unshift(h),r=h}else o.shift(),r=o[0]}return a}(this.getAllVertices(),Ve,ht);return this.placeVertexWalls(e),this.walls}},{key:"chiselHoles",value:function(){for(var t=1;t<this.height-1;t+=2)for(var e=1;e<this.width-1;e+=2)this.walls[t][e]=!1}},{key:"fillCenterTemplate",value:function(){for(var t=Math.floor((this.height-this.centerHeight)/2)+Number(!(this.centerHeight%2)),e=t+this.centerHeight+Number(!(this.centerHeight%2)),n=Math.floor((this.width-this.centerWidth)/2)+Number(!(this.centerWidth%2)),i=n+this.centerWidth+Number(!(this.centerWidth%2)),r=t;r<e;r+=1)for(var o=n;o<i;o+=1)this.walls[r][o]=!0}},{key:"getAllVertices",value:function(){for(var t=[],e=1;e<this.height-1;e+=1)for(var n=1;n<this.width-1;n+=1)this.walls[e][n]||t.push({row:e,col:n});return t}},{key:"placeVertexWalls",value:function(t){var e,n=Ye(t);try{for(n.s();!(e=n.n()).done;){var i,r=(0,u.Z)(e.value,2),o=r[0],a=Ye(r[1]);try{for(a.s();!(i=a.n()).done;){var s=i.value,l=o.row+(s.row-o.row)/2,h=o.col+(s.col-o.col)/2;this.walls[l][h]=!1}}catch(t){a.e(t)}finally{a.f()}}}catch(t){n.e(t)}finally{n.f()}}}]),t}();function Ve(t,e){return Math.abs(e.row-t.row)+Math.abs(e.col-t.col)===2}function $e(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return qe(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?qe(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function qe(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var Qe=new Set([o.RedKey,o.YellowKey,o.GreenKey,o.BlueKey,o.Lever,o.Battery,o.ABox,o.BBox,o.CBox]),Je=new Set([o.RedDoor,o.YellowDoor,o.GreenDoor,o.BlueDoor]),tn=function(){function t(e){(0,h.Z)(this,t),(0,p.Z)(this,"root",void 0),(0,p.Z)(this,"mainNodes",void 0),(0,p.Z)(this,"sideNodeDoors",void 0),(0,p.Z)(this,"minDepth",void 0),(0,p.Z)(this,"coloredDoor",new Map),this.root=e}return(0,c.Z)(t,[{key:"generateSidePaths",value:function(){this.mainNodes=new He,this.sideNodeDoors=new He(this.root),this.processItemNodes(this.root),this.minDepth=Math.max(0,this.sideNodeDoors.highestDepth-Math.floor(1));do{this.addSingleRandomDoor(),this.shiftMinDepth()}while(this.minDepth>0)}},{key:"processItemNodes",value:function(t){this.loadItemNodesRecursive(t);var e,n=$e(this.mainNodes.getAllNodes());try{for(n.s();!(e=n.n()).done;){var i=e.value;i.object!==o.Empty&&this.mainNodes.remove(i)}}catch(t){n.e(t)}finally{n.f()}var r,a=$e(this.sideNodeDoors.getAllNodes());try{for(a.s();!(r=a.n()).done;){var s=r.value;s.object!==o.Empty&&this.sideNodeDoors.remove(s),s.row%2!=0&&s.column%2!=0&&this.sideNodeDoors.remove(s)}}catch(t){a.e(t)}finally{a.f()}}},{key:"loadItemNodesRecursive",value:function(t){Qe.has(t.object)&&(this.mainNodes.addParents(t),this.sideNodeDoors.removeParents(t)),Je.has(t.object)&&this.coloredDoor.set(t.object,t);var e,n=$e(t.children);try{for(n.s();!(e=n.n()).done;){var i=e.value;this.loadItemNodesRecursive(i)}}catch(t){n.e(t)}finally{n.f()}}},{key:"addSingleRandomDoor",value:function(){var e=ht(k),n=this.pickRandomDoorLocation(this.coloredDoor.get(e));if(null!==n){this.sideNodeDoors.removeRecursive(n),n.object=e,t.putEnergyBehind(n);var i=Z[e];if(void 0!==i.oneTimeItem&&void 0===i.reuseItem){var r=i.oneTimeItem,a=this.mainNodes.pickRandom(0,this.mainNodes.highestDepth);null!==a?(a.object=r,this.mainNodes.remove(a)):n.object=o.Empty}}}},{key:"pickRandomDoorLocation",value:function(e){var n=new Le;if(n.addAll(this.sideNodeDoors.getAllNodesBy(this.minDepth,this.minDepth+2,2)),void 0!==e){var i,r=$e(n.getAllNodes());try{for(r.s();!(i=r.n()).done;){var o=i.value;t.isParentOf(e,o)||n.remove(o)}}catch(t){r.e(t)}finally{r.f()}}return n.pickAnyRandom()}},{key:"shiftMinDepth",value:function(){this.minDepth=Math.max(0,this.minDepth-1)}}],[{key:"isParentOf",value:function(t,e){for(var n=e.parent;null!==n;){if(n===t)return!0;n=n.parent}return!1}},{key:"putEnergyBehind",value:function(t){var e=new Le(t);e.remove(t);var n,i=$e(e.getAllNodes());try{for(i.s();!(n=i.n()).done;){var r=n.value;r.object!==o.Empty&&e.removeRecursive(r)}}catch(t){i.e(t)}finally{i.f()}var a=e.pickAnyRandom();null!==a&&(a.object=o.Energy)}}]),t}();function en(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var nn=[[-1,0],[1,0],[0,-1],[0,1]];function rn(t,e,n){return on(t,e,n,0,0,NaN,NaN)}function on(t,e,n,i,r,a,s){var l,h={row:e,column:n,object:o.Empty,parent:null,children:[],depth:i,absoluteDepth:r},c=nn.map((function(t){var i=(0,u.Z)(t,2),r=i[0],o=i[1];return[e+r,n+o]})).filter((function(e){var n=(0,u.Z)(e,2),i=n[0],r=n[1];return!t[i][r]})).filter((function(t){var e=(0,u.Z)(t,2),n=e[0],i=e[1];return!(n===a&&i===s)})),f=i+Number(c.length>1),y=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return en(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?en(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}(c);try{for(y.s();!(l=y.n()).done;){var d=(0,u.Z)(l.value,2),v=d[0],p=d[1],m=on(t,v,p,f,r+1,e,n);m.parent=h,h.children.push(m)}}catch(t){y.e(t)}finally{y.f()}return h}function an(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return sn(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?sn(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function sn(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var ln=function(){function t(e,n,i){(0,h.Z)(this,t),(0,p.Z)(this,"width",void 0),(0,p.Z)(this,"height",void 0),(0,p.Z)(this,"centerTemplate",void 0),(0,p.Z)(this,"numEnergy",20),(0,p.Z)(this,"numDrones",10),(0,p.Z)(this,"numRocks",15),(0,p.Z)(this,"emptySpots",void 0),(0,p.Z)(this,"energySpots",void 0),this.width=e,this.height=n,this.centerTemplate=i}return(0,c.Z)(t,[{key:"templateWidth",get:function(){return this.centerTemplate[0].length}},{key:"templateHeight",get:function(){return this.centerTemplate.length}},{key:"generateMaze",value:function(){var e=new Xe(this.width,this.height,this.templateWidth,this.templateHeight).generateRandomMaze(),n=this.getRootNode(),i=(0,u.Z)(n,2),r=rn(e,i[0],i[1]);new _e(r).generateMainPath(),new tn(r).generateSidePaths(),new We(r).generateInverseToggleDoors(),this.computeEmptySpots(r),this.addOrRemoveEnergy(),this.addDrones(),this.addRocks();var a=e.map((function(t){return t.map((function(t){return t?o.Wall:o.Empty}))}));return this.fillTemplate(a),t.loadNodes(a,r),a}},{key:"getRootNode",value:function(){for(var t=this.getTemplateTopRow(),e=t+this.templateHeight-1,n=this.getTemplateLeftColumn(),i=n+this.templateWidth-1,r=0;r<this.templateWidth;r+=1)if(this.centerTemplate[0][r]===o.BigDoor)return[t-1,n+r];for(var a=0;a<this.templateWidth;a+=1)if(this.centerTemplate[this.templateHeight-1][a]===o.BigDoor)return[e+1,n+a];for(var s=0;s<this.templateHeight;s+=1)if(this.centerTemplate[s][0]===o.BigDoor)return[t+s,n-1];for(var l=0;l<this.templateHeight;l+=1)if(this.centerTemplate[l][this.templateWidth-1]===o.BigDoor)return[t+l,i+1];return[t-1,n+Math.floor(this.templateWidth/2)]}},{key:"getTemplateTopRow",value:function(){return Math.floor((2*this.height+1-this.templateHeight)/2)+Number(!(this.templateHeight%2))}},{key:"getTemplateLeftColumn",value:function(){return Math.floor((2*this.width+1-this.templateWidth)/2)+Number(!(this.templateWidth%2))}},{key:"fillTemplate",value:function(t){for(var e=this.getTemplateTopRow(),n=e+this.templateHeight,i=this.getTemplateLeftColumn(),r=i+this.templateWidth,o=e;o<n;o+=1)for(var a=i;a<r;a+=1)t[o][a]=this.centerTemplate[o-e][a-i]}},{key:"computeEmptySpots",value:function(t){this.emptySpots=new Le(t),this.energySpots=new Le;var e,n=an(this.emptySpots.getAllNodes());try{for(n.s();!(e=n.n()).done;){var i=e.value;i.object===o.Energy&&this.energySpots.add(i),i.object!==o.Empty&&this.emptySpots.remove(i)}}catch(t){n.e(t)}finally{n.f()}}},{key:"addOrRemoveEnergy",value:function(){if(this.energySpots.size>this.numEnergy)for(;this.energySpots.size>this.numEnergy;){var t=this.energySpots.pickAnyRandom();if(null===t)return;this.energySpots.remove(t),t.object=o.Empty,this.emptySpots.add(t)}else for(;this.energySpots.size<this.numEnergy;){var e=this.emptySpots.pickAnyRandom();if(null===e)return;this.emptySpots.remove(e),e.object=o.Energy,this.energySpots.add(e)}}},{key:"addDrones",value:function(){for(var t=0;t<this.numDrones;t+=1){var e=this.emptySpots.pickAnyRandom();if(null===e)return;this.emptySpots.remove(e),e.object=o.Drone}}},{key:"addRocks",value:function(){for(var t=0;t<this.numRocks;t+=1){var e=this.emptySpots.pickAnyRandom();if(null===e)return;this.emptySpots.remove(e),e.object=o.Rock}}}],[{key:"loadNodes",value:function(t,e){t[e.row][e.column]=e.object;var n,i=an(e.children);try{for(i.s();!(n=i.n()).done;){var r=n.value;this.loadNodes(t,r)}}catch(t){i.e(t)}finally{i.f()}}}]),t}(),un=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["map"]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"row",void 0),(0,p.Z)(this,"column",void 0),this.row=e,this.column=n}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t;var e=t.area.game.assets.getObject("Map").clone();e.position.copy(t.area.state.tileLocationToPosition(this.row,this.column)),e.position.y=2,e.rotation.y=lt(0,2*Math.PI),e.scale.set(.125,.125,.125),e.castShadow=!0,this.entity.object=e,this.entity.mask=new P(this.entity.object)}},{key:"onDestroy",value:function(){var t=this.entity.area.state;t.maze[this.row][this.column]=o.Empty,this.entity.area.game.resources.getResource("inventory").collectMap(),t.collectItem.play()}},{key:"onStep",value:function(){this.entity.object.rotateY(Math.PI/256);var t=this.entity.area.findFirstEntity("player");null!==t&&this.entity.isCollidingWith(t)&&this.entity.destroy()}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}]),t}();function hn(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var cn=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"tags",["gun"]),(0,p.Z)(this,"entity",void 0),(0,p.Z)(this,"row",void 0),(0,p.Z)(this,"column",void 0),this.row=e,this.column=n}return(0,c.Z)(t,[{key:"onCreate",value:function(t){this.entity=t;var e=t.area.game.assets.getObject("Gun").clone();e.position.copy(t.area.state.tileLocationToPosition(this.row,this.column)),e.position.y=2,e.rotation.y=lt(0,2*Math.PI),e.scale.set(.35,.35,.35);var n,i=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return hn(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?hn(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}(e.children[0].children);try{for(i.s();!(n=i.n()).done;)n.value.castShadow=!0}catch(t){i.e(t)}finally{i.f()}this.entity.object=e,this.entity.mask=new P(this.entity.object)}},{key:"onDestroy",value:function(){var t=this.entity.area.state;t.maze[this.row][this.column]=o.Empty,this.entity.area.game.resources.getResource("inventory").collectGun(),t.collectItem.play()}},{key:"onStep",value:function(){this.entity.object.rotateY(Math.PI/256);var t=this.entity.area.findFirstEntity("player");null!==t&&this.entity.isCollidingWith(t)&&this.entity.destroy()}},{key:"onTimer",value:function(t){}},{key:"onDraw",value:function(t){}}]),t}();var fn,yn=function(t){(0,y.Z)(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=(0,v.Z)(e);if(n){var r=(0,v.Z)(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return(0,d.Z)(this,t)});function r(){return(0,h.Z)(this,r),i.call(this)}return(0,c.Z)(r,[{key:"onTick",value:function(t){this.entity.area.state.forestAmbience.volume=1-t}}]),r}(mt),dn=n(3012);function vn(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return pn(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?pn(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function pn(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var mn=(fn={},(0,p.Z)(fn,o.Rock,(function(t,e){return new be(t,e)})),(0,p.Z)(fn,o.RedDoor,kn(Dt.Red)),(0,p.Z)(fn,o.YellowDoor,kn(Dt.Yellow)),(0,p.Z)(fn,o.GreenDoor,kn(Dt.Green)),(0,p.Z)(fn,o.BlueDoor,kn(Dt.Blue)),(0,p.Z)(fn,o.RedKey,Zn(Dt.Red)),(0,p.Z)(fn,o.YellowKey,Zn(Dt.Yellow)),(0,p.Z)(fn,o.GreenKey,Zn(Dt.Green)),(0,p.Z)(fn,o.BlueKey,Zn(Dt.Blue)),(0,p.Z)(fn,o.Battery,(function(t,e){return new we(t,e)})),(0,p.Z)(fn,o.Lever,(function(t,e){return new ke(t,e)})),(0,p.Z)(fn,o.ToggleDoor,(function(t,e){return new De(t,e)})),(0,p.Z)(fn,o.InverseToggleDoor,(function(t,e){return new De(t,e,!0)})),(0,p.Z)(fn,o.ABox,bn($t.A)),(0,p.Z)(fn,o.BBox,bn($t.B)),(0,p.Z)(fn,o.CBox,bn($t.C)),(0,p.Z)(fn,o.ADoor,wn($t.A)),(0,p.Z)(fn,o.BDoor,wn($t.B)),(0,p.Z)(fn,o.CDoor,wn($t.C)),(0,p.Z)(fn,o.Drone,(function(t,e){return new te(t,e)})),(0,p.Z)(fn,o.BigDoor,(function(t,e){return new Ee(t,e)})),(0,p.Z)(fn,o.Map,(function(t,e){return new un(t,e)})),(0,p.Z)(fn,o.Gun,(function(t,e){return new cn(t,e)})),fn),gn=function(t){(0,y.Z)(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=(0,v.Z)(e);if(n){var r=(0,v.Z)(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return(0,d.Z)(this,t)});function r(){var t;return(0,h.Z)(this,r),t=i.call(this,r.generateNewMaze()),(0,p.Z)((0,f.Z)(t),"area",void 0),(0,p.Z)((0,f.Z)(t),"_totalEnergy",void 0),(0,p.Z)((0,f.Z)(t),"playerTileLocation",void 0),(0,p.Z)((0,f.Z)(t),"playerAngle",void 0),(0,p.Z)((0,f.Z)(t),"forestAmbience",void 0),(0,p.Z)((0,f.Z)(t),"playerShoot",void 0),(0,p.Z)((0,f.Z)(t),"droneShoot",void 0),(0,p.Z)((0,f.Z)(t),"hitObject",void 0),(0,p.Z)((0,f.Z)(t),"oofSound",void 0),(0,p.Z)((0,f.Z)(t),"collectItem",void 0),(0,p.Z)((0,f.Z)(t),"openDoor",void 0),(0,p.Z)((0,f.Z)(t),"openBigDoor",void 0),(0,p.Z)((0,f.Z)(t),"toggleLever",void 0),(0,p.Z)((0,f.Z)(t),"electricBox",void 0),(0,p.Z)((0,f.Z)(t),"explosion",void 0),(0,p.Z)((0,f.Z)(t),"activatePortal",void 0),(0,p.Z)((0,f.Z)(t),"enterPortal",void 0),t}return(0,c.Z)(r,[{key:"getPlayerTileLocation",value:function(){return this.playerTileLocation}},{key:"getPlayerAngle",value:function(){return this.playerAngle}},{key:"totalEnergy",get:function(){return this._totalEnergy}},{key:"energyLeft",get:function(){return this.area.findEntities("energy").length}},{key:"onCreate",value:function(t){this.area=t;var e=t.game.assets.getTexture("SkyboxBG");t.scene.background=e,this.area.createEntity(new z),t.scene.add(new A.Mig(16777215,.5)),t.game.renderer.shadowMap.enabled=!0,this.forestAmbience=t.createAudio("ForestAmbience"),this.playerShoot=t.createAudio("PlayerShoot"),this.droneShoot=t.createAudio("DroneShoot"),this.hitObject=t.createAudio("HitObject"),this.oofSound=t.createAudio("Oof"),this.collectItem=t.createAudio("CollectItem"),this.openDoor=t.createAudio("OpenDoor"),this.openBigDoor=t.createAudio("OpenBigDoor"),this.toggleLever=t.createAudio("ToggleLever"),this.electricBox=t.createAudio("ElectricBox"),this.explosion=t.createAudio("Explosion"),this.activatePortal=t.createAudio("ActivatePortal"),this.enterPortal=t.createAudio("EnterPortal"),this.forestAmbience.volume=0,this.forestAmbience.play(!0),this.area.game.resources.setResource("health",new ye),this.area.game.resources.setResource("inventory",new de),this.area.game.resources.setResource("door-state",new Se),this.area.createEntity(new Y(this.mazeWidth,this.mazeHeight)),this.buildMaze(),this.area.createEntity(new ae),this.area.createEntity(new yn)}},{key:"buildMaze",value:function(){var t,e=null,n=this.maze.reduce((function(t,e){return t+e.reduce((function(t,e){return t+Number(e===o.Wall)}),0)}),0),i=this.area.createEntity(new G(n,this.area)),r=0,a=vn(this.maze.entries());try{for(a.s();!(t=a.n()).done;){var s,l=(0,u.Z)(t.value,2),h=l[0],c=vn(l[1].entries());try{for(c.s();!(s=c.n()).done;){var f=(0,u.Z)(s.value,2),y=f[0],d=f[1];switch(d){case o.Wall:i.state.addWall(h,y,this);break;case o.Energy:r+=1,this.area.createEntity(new ge(h,y));break;case o.Portal:null===e&&(e=[h,y],this.area.createEntity(new Re(h,y)));break;default:var v=mn[d];void 0!==v&&this.area.createEntity(v(h,y,this.area))}}}catch(t){c.e(t)}finally{c.f()}}}catch(t){a.e(t)}finally{a.f()}this._totalEnergy=r,null===e&&(e=[Math.floor(this.mazeWidth/2),Math.floor(this.mazeHeight/2)]),this.playerTileLocation=e,this.area.createEntity(new Rt(e[0],e[1]))}},{key:"onTimer",value:function(t){}},{key:"onStep",value:function(){this.updatePlayerTileLocationAndAngle(),this.area.game.input.isMouseButtonDown(et.Left)&&this.forestAmbience.audio.context.resume()}},{key:"updatePlayerTileLocationAndAngle",value:function(){var t=this.area.findFirstEntity("player");null!==t&&(this.playerTileLocation=this.positionToTileLocation(t.object.position),this.playerAngle=t.state.getFacingAngle())}},{key:"onDraw",value:function(t){}}],[{key:"generateNewMaze",value:function(){return new ln(13,13,w(dn)).generateMaze()}}]),r}(S);function kn(t){return function(e,n){return new Pt(e,n,t)}}function Zn(t){return function(e,n){return new Lt(e,n,t)}}function bn(t){return function(e,n){return new Ae(e,n,t)}}function wn(t){return function(e,n){return new xe(e,n,t)}}var An=function(t){(0,y.Z)(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=(0,v.Z)(e);if(n){var r=(0,v.Z)(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return(0,d.Z)(this,t)});function r(){var t;return(0,h.Z)(this,r),t=i.call(this,"Skip"),(0,p.Z)((0,f.Z)(t),"tags",["skip-button"]),t}return(0,c.Z)(r,[{key:"onCreateButton",value:function(){this.x=this.entity.area.overlayWidth-50-20,this.y=this.entity.area.overlayHeight-30-20,this.width=50,this.height=30}},{key:"onDestroy",value:function(){}},{key:"onClick",value:function(){this.entity.area.state.introMusic.stop(),this.entity.area.game.setArea(new gn)}},{key:"onStepButton",value:function(){var t=this.entity.area.game.input;(t.isKeyStarted(Q.Enter)||t.isKeyStarted(Q.Space)||t.isGamepadButtonStarted(0,J.ACross)||t.isGamepadButtonStarted(0,J.XSquare)||t.isGamepadButtonStarted(0,J.YTriangle)||t.isGamepadButtonStarted(0,J.Start)||t.getGamepadAxis(0,tt.RightTrigger)>.5)&&this.onClick()}},{key:"onTimer",value:function(t){}}]),r}(vt),Sn="I remember... ",Dn="I was having a dream...",xn=[5,5,5,5,5,5,5],Tn=[.05,.05,.05,.05,.05,.05,.05],Mn=[150,200,400,250,100,180,10],Cn=function(){function t(){(0,h.Z)(this,t),(0,p.Z)(this,"area",void 0),(0,p.Z)(this,"introMusic",void 0),(0,p.Z)(this,"alpha",[0,0,0,0,0,0,0])}return(0,c.Z)(t,[{key:"shouldDrawFinalLine",value:function(){return this.alpha[5]>0}},{key:"onCreate",value:function(t){this.area=t,this.area.createEntity(new An),this.area.game.input.pointerLockEnabled=!1,this.introMusic=this.area.createAudio("Intro"),this.introMusic.volume=0,this.introMusic.play(!0),this.area.setTimer(1,100,!1),this.area.setTimer(2,200,!1)}},{key:"onTimer",value:function(t){1===t&&this.increaseVolume(),t>=2&&t<=8&&this.handleFadeIn(t,t-2),7===t&&this.decreaseVolume(),9===t&&this.area.game.setArea(new gn)}},{key:"increaseVolume",value:function(){this.introMusic.volume=Math.min(1,this.introMusic.volume+.1),1===this.introMusic.volume?this.area.clearTimer(1):this.area.setTimer(1,10,!1)}},{key:"decreaseVolume",value:function(){this.introMusic.volume=Math.max(0,this.introMusic.volume-Tn[4]),this.introMusic.volume<=Tn[4]&&this.introMusic.stop()}},{key:"handleFadeIn",value:function(t,e){if(1===this.alpha[e])return this.area.clearTimer(t),void this.area.setTimer(t+1,Mn[e],!1);this.alpha[e]=Math.min(1,this.alpha[e]+Tn[e]),e>1&&(this.alpha[e-1]=Math.max(0,this.alpha[e-1]-Tn[e]),this.alpha[e-2]=Math.max(0,this.alpha[e-2]-Tn[e])),this.area.setTimer(t,xn[e],!1)}},{key:"onStep",value:function(){this.area.game.input.isMouseButtonDown(et.Left)&&this.introMusic.audio.context.resume()}},{key:"onDraw",value:function(t){this.shouldDrawFinalLine()?this.drawFinalLine(t):this.drawThreeLines(t)}},{key:"drawThreeLines",value:function(t){t.font="24pt sans-serif",t.textAlign="left",t.textBaseline="middle",t.fillStyle="white";var e=this.area.overlayHeight/3-this.area.overlayHeight/6,n=e+this.area.overlayHeight/3,i=n+this.area.overlayHeight/3,r=t.measureText(Sn),o=t.measureText(Sn+Dn);t.globalAlpha=this.alpha[0],t.fillText(Sn,this.area.overlayWidth/2-o.width/2,e),t.globalAlpha=this.alpha[1],t.fillText(Dn,this.area.overlayWidth/2-o.width/2+r.width,e),t.textAlign="center",t.globalAlpha=this.alpha[2],t.fillText("I was trapped inside a massive labyrinth...",this.area.overlayWidth/2,n),t.globalAlpha=this.alpha[3],t.fillText("But the funny thing is...",this.area.overlayWidth/2,i)}},{key:"drawFinalLine",value:function(t){t.font="24pt sans-serif",t.textAlign="center",t.textBaseline="middle",t.fillStyle="white",t.globalAlpha=this.alpha[5],t.fillText("I don't recall ever waking up from that dream...",this.area.overlayWidth/2,this.area.overlayHeight/2)}}]),t}();var Bn=function(t){(0,y.Z)(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=(0,v.Z)(e);if(n){var r=(0,v.Z)(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return(0,d.Z)(this,t)});function r(){return(0,h.Z)(this,r),i.call(this,10)}return(0,c.Z)(r,[{key:"onTick",value:function(t){this.entity.area.state.titleMusic.volume=1-t}},{key:"onFinish",value:function(){this.entity.area.state.titleMusic.stop(),this.entity.area.game.setArea(new Cn)}}]),r}(Zt),Rn=n(8945);function En(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return jn(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?jn(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function jn(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var Pn=(0,p.Z)({},o.BigDoor,(function(t,e){return new nt(t,e)})),In=function(t){(0,y.Z)(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=(0,v.Z)(e);if(n){var r=(0,v.Z)(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return(0,d.Z)(this,t)});function r(){var t;return(0,h.Z)(this,r),t=i.call(this,w(Rn)),(0,p.Z)((0,f.Z)(t),"area",void 0),(0,p.Z)((0,f.Z)(t),"camera",void 0),(0,p.Z)((0,f.Z)(t),"cameraPos",[0,0]),(0,p.Z)((0,f.Z)(t),"drawTitle",!0),(0,p.Z)((0,f.Z)(t),"titleMusic",void 0),t}return(0,c.Z)(r,[{key:"onCreate",value:function(t){this.area=t,this.area.createEntity(new Y(this.mazeWidth,this.mazeHeight)),this.buildDummyMaze();var e=t.game.assets.getTexture("SkyboxBG");t.scene.background=e,this.area.createEntity(new z),t.scene.add(new A.Mig(16777215,.5)),t.game.renderer.shadowMap.enabled=!0,this.area.game.input.pointerLockEnabled=!1,this.camera=new A.cPb(50,t.game.canvasWidth/t.game.canvasHeight,.001,1e3),this.area.camera=this.camera;var n=this.tileLocationToPosition(this.cameraPos[0],this.cameraPos[1]);this.camera.position.copy(n),this.camera.position.y=2.5,this.camera.position.x-=2.5,this.camera.quaternion.setFromEuler(new A.USm(Math.PI/30,Math.PI/2,0,"YXZ")),this.titleMusic=this.area.createAudio("Title"),this.titleMusic.play(!0),this.area.createEntity(new pt),this.area.createEntity(new mt(3))}},{key:"buildDummyMaze",value:function(){var t,e=this.maze.reduce((function(t,e){return t+e.reduce((function(t,e){return t+Number(e===o.Wall)}),0)}),0),n=this.area.createEntity(new G(e,this.area)),i=En(this.maze.entries());try{for(i.s();!(t=i.n()).done;){var r,a=(0,u.Z)(t.value,2),s=a[0],l=En(a[1].entries());try{for(l.s();!(r=l.n()).done;){var h=(0,u.Z)(r.value,2),c=h[0],f=h[1];switch(f){case o.Wall:n.state.addWall(s,c,this);break;case o.Portal:this.cameraPos=[s,c];break;default:var y=Pn[f];void 0!==y&&this.area.createEntity(y(s,c,this.area))}}}catch(t){l.e(t)}finally{l.f()}}}catch(t){i.e(t)}finally{i.f()}}},{key:"onTimer",value:function(t){}},{key:"onStep",value:function(){this.camera.aspect=this.area.game.canvasWidth/this.area.game.canvasHeight,this.camera.updateProjectionMatrix();var t=this.area.game.input;t.isMouseButtonDown(et.Left)&&this.titleMusic.audio.context.resume(),(t.isKeyStarted(Q.Enter)||t.isKeyStarted(Q.Space)||t.isGamepadButtonStarted(0,J.ACross)||t.isGamepadButtonStarted(0,J.XSquare)||t.isGamepadButtonStarted(0,J.YTriangle)||t.isGamepadButtonStarted(0,J.Start)||t.getGamepadAxis(0,tt.RightTrigger)>.5)&&this.startGame()}},{key:"startGame",value:function(){if(this.drawTitle){this.drawTitle=!1;var t,e=En(this.area.findEntities("start-button"));try{for(e.s();!(t=e.n()).done;)t.value.destroy()}catch(t){e.e(t)}finally{e.f()}this.area.createEntity(new Bn)}}},{key:"onDraw",value:function(t){if(this.drawTitle){t.font="bold 64pt serif",t.textAlign="center",t.textBaseline="top",t.fillStyle="#0368ff",t.fillText("Trapped Inside",this.area.overlayWidth/2,20),t.beginPath(),t.strokeStyle="black",t.lineWidth=2,t.strokeText("Trapped Inside",this.area.overlayWidth/2,20),t.stroke();var e=t.measureText("Trapped Inside");t.font="18pt sans-serif",t.fillStyle="white",t.fillText("Created by Bryan McClain",this.area.overlayWidth/2,40+e.actualBoundingBoxDescent)}}}]),r}(S),Ln=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"ticksLeft",void 0),(0,p.Z)(this,"ticks",void 0),(0,p.Z)(this,"looping",void 0),(0,p.Z)(this,"running",void 0),this.ticksLeft=e,this.ticks=e,this.looping=n,this.running=!0}return(0,c.Z)(t,[{key:"isRunning",value:function(){return this.running}},{key:"setRunning",value:function(t){this.running=t}},{key:"tick",value:function(){switch(this.ticksLeft){case 0:return!1;case 1:return this.looping?this.ticksLeft=this.ticks:this.ticksLeft=0,!0;default:return this.ticksLeft-=1,!1}}}]),t}();function Fn(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var On=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"area",void 0),(0,p.Z)(this,"state",void 0),(0,p.Z)(this,"mask",void 0),(0,p.Z)(this,"timers",new Map),(0,p.Z)(this,"_isDestroyed",!1),(0,p.Z)(this,"_object",null),this.area=e,this.state=n,this.mask=new L}return(0,c.Z)(t,[{key:"destroy",value:function(){this._isDestroyed=!0}},{key:"isDestroyed",get:function(){return this._isDestroyed}},{key:"object",get:function(){return this._object},set:function(t){null!==this._object&&this.area.scene.remove(this._object),null!==t&&this.area.scene.add(t),this._object=t}},{key:"setTimer",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];e<1||this.timers.set(t,new Ln(e,n))}},{key:"clearTimer",value:function(t){this.timers.delete(t)}},{key:"isCollidingWith",value:function(t){return this.mask.isCollidingWith(t.mask)}},{key:"_create",value:function(){this.state.onCreate(this)}},{key:"_destroy",value:function(){this.state.onDestroy(),this.mask.showMask=!1,null!==this._object&&this.area.scene.remove(this._object)}},{key:"_tickTimers",value:function(){var t,e=[],n=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Fn(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Fn(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}(this.timers);try{for(n.s();!(t=n.n()).done;){var i=(0,u.Z)(t.value,2),r=i[0],o=i[1];o.isRunning()&&o.tick()&&e.push(r)}}catch(t){n.e(t)}finally{n.f()}for(var a=0,s=e;a<s.length;a++){var l=s[a];this.state.onTimer(l)}}},{key:"_step",value:function(){this.state.onStep()}},{key:"_draw",value:function(t){this.state.onDraw(t)}}]),t}(),Wn=function(){function t(e){(0,h.Z)(this,t),(0,p.Z)(this,"audio",void 0),this.audio=e}return(0,c.Z)(t,[{key:"volume",get:function(){return this.audio.getVolume()},set:function(t){this.audio.setVolume(t)}},{key:"loop",get:function(){return this.audio.getLoop()},set:function(t){this.audio.setLoop(t)}},{key:"isPlaying",get:function(){return this.audio.isPlaying}},{key:"play",value:function(t){this.audio.isPlaying&&this.audio.stop(),void 0!==t&&(this.loop=t),this.audio.play()}},{key:"stop",value:function(){this.audio.isPlaying&&this.audio.stop()}}]),t}();function Gn(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Nn(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Nn(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function Nn(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var Hn,zn,Kn=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"game",void 0),(0,p.Z)(this,"state",void 0),(0,p.Z)(this,"scene",void 0),(0,p.Z)(this,"audioListener",void 0),(0,p.Z)(this,"_camera",void 0),(0,p.Z)(this,"allEntities",new Set),(0,p.Z)(this,"taggedEntities",new Map),(0,p.Z)(this,"toCreate",new Set),(0,p.Z)(this,"timers",new Map),(0,p.Z)(this,"overlayWidth",768),(0,p.Z)(this,"overlayHeight",432),this.game=e,this.state=n,this.scene=new A.xsS,this.audioListener=new A.SJI,this._camera=new A.cPb,this._camera.add(this.audioListener)}return(0,c.Z)(t,[{key:"camera",get:function(){return this._camera},set:function(t){this._camera.remove(this.audioListener),t.add(this.audioListener),this._camera=t}},{key:"createEntity",value:function(t){var e=new On(this,t);return this.toCreate.add(e),e}},{key:"getAllEntities",value:function(){return Array.from(this.allEntities)}},{key:"findEntities",value:function(t){return this.taggedEntities.has(t)?Array.from(this.taggedEntities.get(t)):[]}},{key:"findFirstEntity",value:function(t){if(!this.taggedEntities.has(t))return null;var e=this.taggedEntities.get(t).values().next();return e.done?null:e.value}},{key:"setTimer",value:function(t,e,n){e<1||this.timers.set(t,new Ln(e,n))}},{key:"clearTimer",value:function(t){this.timers.delete(t)}},{key:"createAudio",value:function(t){var e=new A.BbS(this.audioListener);return t instanceof AudioBuffer?e.buffer=t:"string"==typeof t&&(e.buffer=this.game.assets.getAudio(t)),new Wn(e)}},{key:"createPositionalAudio",value:function(t){var e=new A.VYz(this.audioListener);return t instanceof AudioBuffer?e.buffer=t:"string"==typeof t&&(e.buffer=this.game.assets.getAudio(t)),new Wn(e)}},{key:"_tickTimers",value:function(){var t,e=[],n=Gn(this.timers);try{for(n.s();!(t=n.n()).done;){var i=(0,u.Z)(t.value,2),r=i[0],o=i[1];o.isRunning()&&o.tick()&&e.push(r)}}catch(t){n.e(t)}finally{n.f()}for(var a=0,s=e;a<s.length;a++){var l=s[a];this.state.onTimer(l)}}},{key:"_createEntities",value:function(){if(0!==this.toCreate.size){var t,e=Gn(this.toCreate);try{for(e.s();!(t=e.n()).done;){var n=t.value;this.addEntityToArea(n)}}catch(t){e.e(t)}finally{e.f()}var i=this.toCreate;this.toCreate=new Set;var r,o=Gn(i);try{for(o.s();!(r=o.n()).done;)r.value._create()}catch(t){o.e(t)}finally{o.f()}}}},{key:"addEntityToArea",value:function(t){this.allEntities.add(t);var e,n=Gn(t.state.tags);try{for(n.s();!(e=n.n()).done;){var i=e.value;this.addTaggedEntityToMap(t,i)}}catch(t){n.e(t)}finally{n.f()}}},{key:"addTaggedEntityToMap",value:function(t,e){this.taggedEntities.has(e)||this.taggedEntities.set(e,new Set),this.taggedEntities.get(e).add(t)}},{key:"_destroyEntities",value:function(){var t,e=[],n=Gn(this.allEntities);try{for(n.s();!(t=n.n()).done;){var i=t.value;i.isDestroyed&&e.push(i)}}catch(t){n.e(t)}finally{n.f()}for(var r=0,o=e;r<o.length;r++){var a=o[r];this.removeEntityFromArea(a)}for(var s=0,l=e;s<l.length;s++)l[s]._destroy()}},{key:"removeEntityFromArea",value:function(t){this.allEntities.delete(t);var e,n=Gn(t.state.tags);try{for(n.s();!(e=n.n()).done;){var i=e.value;this.removeTaggedEntityFromMap(t,i)}}catch(t){n.e(t)}finally{n.f()}}},{key:"removeTaggedEntityFromMap",value:function(t,e){this.taggedEntities.has(e)&&this.taggedEntities.get(e).delete(t)}},{key:"_tickEntityTimers",value:function(){var t,e=Gn(this.allEntities);try{for(e.s();!(t=e.n()).done;)t.value._tickTimers()}catch(t){e.e(t)}finally{e.f()}}},{key:"_stepEntities",value:function(){var t,e=Gn(this.allEntities);try{for(e.s();!(t=e.n()).done;)t.value._step()}catch(t){e.e(t)}finally{e.f()}}},{key:"_drawScene",value:function(t,e){var n,i=Gn(this.allEntities);try{for(i.s();!(n=i.n()).done;)n.value.mask._drawMask(this.scene)}catch(t){i.e(t)}finally{i.f()}t.render(this.scene,this.camera);var r=e.getContext("2d");e.width=this.overlayWidth,e.height=this.overlayHeight,r.clearRect(0,0,this.overlayWidth,this.overlayHeight),this.state.onDraw(r);var o,a=Gn(this.allEntities);try{for(a.s();!(o=a.n()).done;)o.value._draw(r)}catch(t){a.e(t)}finally{a.f()}}}]),t}(),_n=n(1610),Yn=n(7623),Un=n.n(Yn),Xn=function(){function t(){(0,h.Z)(this,t),(0,p.Z)(this,"audioLoader",void 0),(0,p.Z)(this,"imageLoader",void 0),(0,p.Z)(this,"textureLoader",void 0),(0,p.Z)(this,"cubeTextureLoader",void 0),(0,p.Z)(this,"objectLoader",void 0),(0,p.Z)(this,"materialLoader",void 0),(0,p.Z)(this,"animationLoader",void 0),(0,p.Z)(this,"gltfLoader",void 0),(0,p.Z)(this,"textures",{}),(0,p.Z)(this,"sounds",{}),(0,p.Z)(this,"images",{}),(0,p.Z)(this,"objects",{}),(0,p.Z)(this,"materials",{}),(0,p.Z)(this,"animations",{}),this.audioLoader=new A.mTL,this.imageLoader=new A.S3k,this.textureLoader=new A.dpR,this.cubeTextureLoader=new A.cBK,this.objectLoader=new A.Gql,this.materialLoader=new A.u7G,this.animationLoader=new A.sYA,this.gltfLoader=new _n.E}return(0,c.Z)(t,[{key:"loadTexture",value:function(e,n){var i=this;return this.textureLoader.loadAsync(n,t.onProgress("texture",e,n)).then((function(t){i.textures[e]=t})).catch(t.onError("texture",e,n))}},{key:"loadCubeTexture",value:function(e,n){var i=this;return new Promise((function(r){var o=n.positiveX,a=n.negativeX,s=n.positiveY,l=n.negativeY,u=n.positiveZ,h=n.negativeZ;i.cubeTextureLoader.load([o,a,s,l,u,h],(function(t){i.textures[e]=t,r()}),t.onProgress("cube texture",e,n.toString()),t.onError("cube texture",e,n.toString()))}))}},{key:"saveTexture",value:function(t,e){this.textures[t]=e}},{key:"getTexture",value:function(t){var e=this.textures[t];if(void 0===e)throw new Error("No such loaded texture '".concat(t,"'"));return e}},{key:"loadAudioFile",value:function(e,n){var i=this;return this.audioLoader.loadAsync(n,t.onProgress("audio",e,n)).then((function(t){i.sounds[e]=t})).catch(t.onError("audio",e,n))}},{key:"saveAudio",value:function(t,e){this.sounds[t]=e}},{key:"getAudio",value:function(t){var e=this.sounds[t];if(void 0===e)throw new Error("No such loaded audio buffer '".concat(t,"'"));return e}},{key:"loadImage",value:function(e,n){var i=this;return this.imageLoader.loadAsync(n,t.onProgress("image",e,n)).then((function(t){i.images[e]=t})).catch(t.onError("audio",e,n))}},{key:"saveImage",value:function(t,e){this.images[t]=e}},{key:"getImage",value:function(t){var e=this.images[t];if(void 0===e)throw new Error("No such loaded image '".concat(t,"'"));return e}},{key:"loadObject",value:function(e,n){var i=this;return this.objectLoader.loadAsync(n,t.onProgress("object",e,n)).then((function(t){i.objects[e]=t})).catch(t.onError("object",e,n))}},{key:"saveObject",value:function(t,e){this.objects[t]=e}},{key:"getObject",value:function(t){var e=this.objects[t];if(void 0===e)throw new Error("No such loaded object '".concat(t,"'"));return e}},{key:"loadMaterial",value:function(e,n){var i=this;return this.materialLoader.loadAsync(n,t.onProgress("animation",e,n)).then((function(t){i.materials[e]=t})).catch(t.onError("animation",e,n))}},{key:"saveMaterial",value:function(t,e){this.materials[t]=e}},{key:"getMaterial",value:function(t){var e=this.materials[t];if(void 0===e)throw new Error("No such loaded material '".concat(t,"'"));return e}},{key:"loadAnimations",value:function(e,n){var i=this;return this.animationLoader.loadAsync(e,t.onProgress("animation",null,e)).then((function(t){return n(t,i)})).catch(t.onError("animation",null,e))}},{key:"saveAnimation",value:function(t,e){this.animations[t]=e}},{key:"getAnimation",value:function(t){var e=this.animations[t];if(void 0===e)throw new Error("No such loaded animation '".concat(t,"'"));return e}},{key:"loadGLTFFile",value:function(e,n){var i=this;return this.gltfLoader.loadAsync(e,t.onProgress("gltf",null,e)).then((function(t){return n(t,i)})).catch(t.onError("gltf",null,e))}}],[{key:"onProgress",value:function(t,e,n){return function(i){var r=null!==e?"'".concat(e,"' "):"",o="Loading ".concat(t," ").concat(r,"from '").concat(n,"': ").concat(Un()(i.loaded));if(i.lengthComputable){var a=100*i.loaded/i.total;console.log("".concat(o," / ").concat(Un()(i.total)," (").concat(a.toFixed(0),"%)"))}else console.log("".concat(o," Loaded"))}}},{key:"onError",value:function(t,e,n){var i=null!==e?"'".concat(e,"' "):"";return function(e){throw new Error("Error loading ".concat(t," ").concat(i,"from '").concat(n,"': ").concat(e.message))}}}]),t}();(zn=Hn||(Hn={})).saveObject=function(t,e){window.localStorage.setItem(t,JSON.stringify(e))},zn.loadObject=function(t,e){var n=window.localStorage.getItem(t);if(null===n){if(void 0!==e)return e;throw new Error("Key '".concat(t,"' does not exist in local storage"))}return JSON.parse(n)},zn.removeObject=function(t){window.localStorage.removeItem(t)},zn.exists=function(t){return null!==window.localStorage.getItem(t)},zn.clear=function(){window.localStorage.clear()};var Vn=function(){function t(){(0,h.Z)(this,t),(0,p.Z)(this,"resources",{})}return(0,c.Z)(t,[{key:"setResource",value:function(t,e){this.resources[t]=e}},{key:"getResource",value:function(t,e){var n=this.resources[t];if(void 0===n){if(void 0!==e)return e;throw new Error("No such resource '".concat(t,"'"))}return n}},{key:"deleteResource",value:function(t){delete this.resources[t]}},{key:"exists",value:function(t){return void 0!==this.resources[t]}},{key:"clear",value:function(){this.resources={}}}]),t}(),$n=function(){function t(e,n){(0,h.Z)(this,t),(0,p.Z)(this,"input",void 0),(0,p.Z)(this,"assets",void 0),(0,p.Z)(this,"resources",void 0),(0,p.Z)(this,"screenSize",null),(0,p.Z)(this,"_currentArea",void 0),(0,p.Z)(this,"nextArea",null),(0,p.Z)(this,"renderer",void 0),(0,p.Z)(this,"canvas",void 0),(0,p.Z)(this,"overlayCanvas",void 0),(0,p.Z)(this,"running",!1),this.input=new st(n),this.assets=new Xn,this.resources=new Vn,this.renderer=new A.CP7({canvas:e}),this.canvas=e,this.overlayCanvas=n}return(0,c.Z)(t,[{key:"start",value:function(t){!1===this.running&&(this.running=!0,this._currentArea=new Kn(this,t),this._currentArea.state.onCreate(this._currentArea),this.overlayCanvas.focus(),requestAnimationFrame(this.tick.bind(this)))}},{key:"stop",value:function(){this.running=!1}},{key:"currentArea",get:function(){return this._currentArea}},{key:"setArea",value:function(t){null===this.nextArea&&(this.nextArea=t)}},{key:"canvasWidth",get:function(){return this.canvas.width}},{key:"canvasHeight",get:function(){return this.canvas.height}},{key:"overlayWidth",get:function(){return this.overlayCanvas.width}},{key:"overlayHeight",get:function(){return this.overlayCanvas.height}},{key:"tick",value:function(){this.resizeCanvas(),null!==this.nextArea&&(this._currentArea=new Kn(this,this.nextArea),this.nextArea=null,this.currentArea.state.onCreate(this.currentArea)),this.currentArea._tickTimers(),this.currentArea.state.onStep(),this.currentArea._createEntities(),this.currentArea._destroyEntities(),this.currentArea._tickEntityTimers(),this.currentArea._stepEntities(),this.currentArea._drawScene(this.renderer,this.overlayCanvas),this.input._clearKeyTick(),this.input._updateGamepad(),this.input._clearMouseTick(),!0===this.running&&requestAnimationFrame(this.tick.bind(this))}},{key:"resizeCanvas",value:function(){var t=null===this.screenSize?[this.canvas.clientWidth,this.canvas.clientHeight]:this.screenSize,e=(0,u.Z)(t,2),n=e[0],i=e[1];this.canvas.width===n&&this.canvas.height===i||(this.canvas.width=n,this.canvas.height=i,this.renderer.setSize(n,i,!1))}}]),t}(),qn=n(5701),Qn=n.n(qn),Jn=n(28);Qn()(Jn.Z,{insert:"head",singleton:!1}),Jn.Z.locals;var ti=n(5497),ei=n(1177),ni=n(3345),ii=n(7131),ri=n(301),oi=n(1645),ai=n(2374),si=n(1960),li=n(7319),ui=n(1304),hi=n(9165),ci=n(8863),fi=n(7928),yi=n(34),di=n(4505),vi=n(111),pi=n(9216),mi=n(833),gi=n(7446),ki=n(5965),Zi=n(2409),bi=n(4316),wi=n(8244),Ai=n(5140),Si=n(4770),Di=n(2475),xi=n(8163),Ti=n(595),Mi=n(2606),Ci=n(6013),Bi=n(2798),Ri=n(4855),Ei=n(5015),ji=n(3860),Pi=n(7922),Ii=n(3049),Li=n(6627),Fi=n(8983),Oi=n(4416),Wi=n(5499),Gi=n(8754),Ni=n(5874),Hi=n(8652),zi=n(4517),Ki=n(9545),_i=n(9660),Yi=n(5467),Ui=n(3575),Xi=n(2553),Vi=n(5436),$i=n(3458),qi=n(6656),Qi=n(9812);function Ji(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return tr(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?tr(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function tr(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var er=document.createElement("canvas");document.body.appendChild(er);var nr=document.createElement("canvas");nr.setAttribute("tabindex","0"),nr.classList.add("overlay"),document.body.appendChild(nr),nr.width=nr.clientWidth,nr.height=nr.clientHeight;var ir=nr.getContext("2d");function rr(){return(rr=(0,a.Z)(l().mark((function t(e){return l().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Promise.all([e.assets.loadTexture("GrassColor",ai),e.assets.loadTexture("GrassNormal",si),e.assets.loadTexture("GrassOcclusion",li),e.assets.loadTexture("BrickColor",ui),e.assets.loadTexture("BrickNormal",hi),e.assets.loadTexture("BrickOcclusion",ci),e.assets.loadCubeTexture("SkyboxBG",{positiveX:ti,negativeX:ei,positiveY:ni,negativeY:ii,positiveZ:ri,negativeZ:oi}),e.assets.loadGLTFFile(fi,(function(t,e){e.saveObject("Wall",t.scene.children[0])})),e.assets.loadGLTFFile(yi,(function(t,e){e.saveObject("Door",t.scene);var n,i=Ji(t.animations);try{for(i.s();!(n=i.n()).done;){var r=n.value;e.saveAnimation(r.name,r)}}catch(t){i.e(t)}finally{i.f()}or(t.scene.children[0].children[0],7566195,.25),or(t.scene.children[1],8023148,.25),or(t.scene.children[2],8023148,.25)})),e.assets.loadGLTFFile(di,(function(t,e){e.saveObject("ToggleDoor",t.scene),or(t.scene.children[0].children[0],7566195,.25),or(t.scene.children[0].children[1],6881484,.25),or(t.scene.children[1],8023148,.15),or(t.scene.children[2],8023148,.15)})),e.assets.loadGLTFFile(vi,(function(t,e){e.saveObject("ElectricDoor",t.scene),or(t.scene.children[0].children[0],16776960,.25),or(t.scene.children[1],16777215,.3),or(t.scene.children[2],16777215,.3)})),e.assets.loadGLTFFile(gi,(function(t,e){e.saveObject("Lever",t.scene.children[0]);var n,i=Ji(t.animations);try{for(i.s();!(n=i.n()).done;){var r=n.value;e.saveAnimation(r.name,r)}}catch(t){i.e(t)}finally{i.f()}})),e.assets.loadGLTFFile(pi,(function(t,e){e.saveObject("Key",t.scene.children[0])})),e.assets.loadGLTFFile(mi,(function(t,e){e.saveObject("Battery",t.scene.children[0])})),e.assets.loadGLTFFile(bi,(function(t,e){var n=t.scene.children[0];e.saveObject("Drone",n),or(n.children[0],7566195,.5),or(n.children[2],2580722,.25)})),e.assets.loadGLTFFile(ki,(function(t,e){var n=t.scene.children[0];e.saveObject("ElectricBox",n),or(n.children[0],8882055,.5);var i,r=Ji(t.animations);try{for(r.s();!(i=r.n()).done;){var o=i.value;e.saveAnimation(o.name,o)}}catch(t){r.e(t)}finally{r.f()}})),e.assets.loadGLTFFile(Zi,(function(t,e){e.saveObject("Rock",t.scene.children[0])})),e.assets.loadGLTFFile(wi,(function(t,e){e.saveObject("Gun",t.scene)})),e.assets.loadGLTFFile(Ai,(function(t,e){e.saveObject("Map",t.scene.children[0])})),e.assets.loadGLTFFile(Si,(function(t,e){var n=t.scene.children[0];e.saveObject("Explosion",n);var i=n.material;i.transparent=!0,i.opacity=.75})),e.assets.loadGLTFFile(Di,(function(t,e){e.saveObject("Portal",t.scene);var n,i=Ji(t.animations);try{for(i.s();!(n=i.n()).done;){var r=n.value;e.saveAnimation(r.name,r)}}catch(t){i.e(t)}finally{i.f()}or(t.scene.children[1],5316383,.25);var o=t.scene.children[2].material;o.transparent=!0,o.opacity=.8})),e.assets.loadImage("RedKey",xi),e.assets.loadImage("YellowKey",Ti),e.assets.loadImage("GreenKey",Mi),e.assets.loadImage("BlueKey",Ci),e.assets.loadImage("Energy",Bi),e.assets.loadImage("Battery",Ri),e.assets.loadImage("Lever",Ei),e.assets.loadImage("LeverReverse",ji),e.assets.loadImage("ElectricBox",Pi),e.assets.loadImage("Gun",Ii),e.assets.loadImage("Map",Li),e.assets.loadAudioFile("PlayerShoot",Fi),e.assets.loadAudioFile("DroneShoot",Oi),e.assets.loadAudioFile("HitObject",Wi),e.assets.loadAudioFile("Oof",Gi),e.assets.loadAudioFile("CollectItem",Ni),e.assets.loadAudioFile("OpenDoor",Hi),e.assets.loadAudioFile("OpenBigDoor",zi),e.assets.loadAudioFile("ToggleLever",Ki),e.assets.loadAudioFile("ElectricBox",_i),e.assets.loadAudioFile("Explosion",Yi),e.assets.loadAudioFile("ActivatePortal",Ui),e.assets.loadAudioFile("EnterPortal",Xi),e.assets.loadAudioFile("Title",Vi),e.assets.loadAudioFile("Intro",$i),e.assets.loadAudioFile("ForestAmbience",qi),e.assets.loadAudioFile("HeartMonitor",Qi)]);case 2:return t.abrupt("return",e);case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function or(t,e,n){var i=t.material;i.emissive.set(e),i.emissiveIntensity=n}ir.font="12pt sans-serif",ir.fillStyle="white",ir.textAlign="center",ir.textBaseline="middle",ir.fillText("Loading game...",nr.width/2,nr.height/2),function(t){return rr.apply(this,arguments)}(new $n(er,nr)).then((function(t){t.start(new In)})).catch((function(t){console.log("Failed to load assets: "+t,t.stack)}))},28:(t,e,n)=>{n.d(e,{Z:()=>s});var i=n(445),r=n.n(i),o=n(352),a=n.n(o)()(r());a.push([t.id,"* {\n  margin: 0;\n  padding: 0;\n}\n\nbody,\nhtml {\n  height: 100%;\n}\n\ncanvas {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\ncanvas.overlay {\n  z-index: 10;\n}\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;AACd;;AAEA;EACE,WAAW;AACb",sourcesContent:["* {\n  margin: 0;\n  padding: 0;\n}\n\nbody,\nhtml {\n  height: 100%;\n}\n\ncanvas {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\ncanvas.overlay {\n  z-index: 10;\n}\n"],sourceRoot:""}]);const s=a}},n={};function i(t){var r=n[t];if(void 0!==r)return r.exports;var o=n[t]={id:t,exports:{}};return e[t](o,o.exports,i),o.exports}i.m=e,t=[],i.O=(e,n,r,o)=>{if(!n){var a=1/0;for(u=0;u<t.length;u++){for(var[n,r,o]=t[u],s=!0,l=0;l<n.length;l++)(!1&o||a>=o)&&Object.keys(i.O).every((t=>i.O[t](n[l])))?n.splice(l--,1):(s=!1,o<a&&(a=o));s&&(t.splice(u--,1),e=r())}return e}o=o||0;for(var u=t.length;u>0&&t[u-1][2]>o;u--)t[u]=t[u-1];t[u]=[n,r,o]},i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.p="/TrappedInside/",(()=>{var t={179:0};i.O.j=e=>0===t[e];var e=(e,n)=>{var r,o,[a,s,l]=n,u=0;for(r in s)i.o(s,r)&&(i.m[r]=s[r]);for(l&&l(i),e&&e(n);u<a.length;u++)o=a[u],i.o(t,o)&&t[o]&&t[o][0](),t[a[u]]=0;i.O()},n=self.webpackChunkgame_engine=self.webpackChunkgame_engine||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})();var r=i.O(void 0,[826],(()=>i(5396)));r=i.O(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,